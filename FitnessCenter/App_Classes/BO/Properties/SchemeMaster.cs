//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessManagement))]
    [KnownType(typeof(CancellationMaster))]
    [KnownType(typeof(CancellationTransaction))]
    [KnownType(typeof(DowngradeTransaction))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(MembershipTransaction))]
    [KnownType(typeof(PackageMaster))]
    [KnownType(typeof(UpgradeTransaction))]
    [KnownType(typeof(UserSchemeTransaction))]
    public partial class SchemeMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual long PackageId
        {
            get { return _packageId; }
            set
            {
                if (_packageId != value)
                {
                    if (PackageMaster != null && PackageMaster.ID != value)
                    {
                        PackageMaster = null;
                    }
                    _packageId = value;
                }
            }
        }
        private long _packageId;
        [DataMember]
        public virtual string SchemeName
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> AdditionalExpense
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> JoiningFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> AdminFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> MemberFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> PTFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> NetAmount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> SGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> CGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> IGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> TotalAmount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string StartTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual string EndTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> DurationMonth
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> CancelDays
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> UpgradeDays
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> DowngradeDays
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessManagement> AccessManagements
        {
            get
            {
                if (_accessManagements == null)
                {
                    var newCollection = new FixupCollection<AccessManagement>();
                    newCollection.CollectionChanged += FixupAccessManagements;
                    _accessManagements = newCollection;
                }
                return _accessManagements;
            }
            set
            {
                if (!ReferenceEquals(_accessManagements, value))
                {
                    var previousValue = _accessManagements as FixupCollection<AccessManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessManagements;
                    }
                    _accessManagements = value;
                    var newValue = value as FixupCollection<AccessManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessManagements;
                    }
                }
            }
        }
        private ICollection<AccessManagement> _accessManagements;
        
    
        [DataMember]
        public virtual ICollection<CancellationMaster> CancellationMasters
        {
            get
            {
                if (_cancellationMasters == null)
                {
                    var newCollection = new FixupCollection<CancellationMaster>();
                    newCollection.CollectionChanged += FixupCancellationMasters;
                    _cancellationMasters = newCollection;
                }
                return _cancellationMasters;
            }
            set
            {
                if (!ReferenceEquals(_cancellationMasters, value))
                {
                    var previousValue = _cancellationMasters as FixupCollection<CancellationMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCancellationMasters;
                    }
                    _cancellationMasters = value;
                    var newValue = value as FixupCollection<CancellationMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCancellationMasters;
                    }
                }
            }
        }
        private ICollection<CancellationMaster> _cancellationMasters;
        
    
        [DataMember]
        public virtual ICollection<CancellationTransaction> CancellationTransactions
        {
            get
            {
                if (_cancellationTransactions == null)
                {
                    var newCollection = new FixupCollection<CancellationTransaction>();
                    newCollection.CollectionChanged += FixupCancellationTransactions;
                    _cancellationTransactions = newCollection;
                }
                return _cancellationTransactions;
            }
            set
            {
                if (!ReferenceEquals(_cancellationTransactions, value))
                {
                    var previousValue = _cancellationTransactions as FixupCollection<CancellationTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCancellationTransactions;
                    }
                    _cancellationTransactions = value;
                    var newValue = value as FixupCollection<CancellationTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCancellationTransactions;
                    }
                }
            }
        }
        private ICollection<CancellationTransaction> _cancellationTransactions;
        
    
        [DataMember]
        public virtual ICollection<DowngradeTransaction> DowngradeTransactions
        {
            get
            {
                if (_downgradeTransactions == null)
                {
                    var newCollection = new FixupCollection<DowngradeTransaction>();
                    newCollection.CollectionChanged += FixupDowngradeTransactions;
                    _downgradeTransactions = newCollection;
                }
                return _downgradeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_downgradeTransactions, value))
                {
                    var previousValue = _downgradeTransactions as FixupCollection<DowngradeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDowngradeTransactions;
                    }
                    _downgradeTransactions = value;
                    var newValue = value as FixupCollection<DowngradeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDowngradeTransactions;
                    }
                }
            }
        }
        private ICollection<DowngradeTransaction> _downgradeTransactions;
        
    
        [DataMember]
        public virtual ICollection<Membership> Memberships
        {
            get
            {
                if (_memberships == null)
                {
                    var newCollection = new FixupCollection<Membership>();
                    newCollection.CollectionChanged += FixupMemberships;
                    _memberships = newCollection;
                }
                return _memberships;
            }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships as FixupCollection<Membership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberships;
                    }
                    _memberships = value;
                    var newValue = value as FixupCollection<Membership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberships;
                    }
                }
            }
        }
        private ICollection<Membership> _memberships;
        
    
        [DataMember]
        public virtual ICollection<MembershipTransaction> MembershipTransactions
        {
            get
            {
                if (_membershipTransactions == null)
                {
                    var newCollection = new FixupCollection<MembershipTransaction>();
                    newCollection.CollectionChanged += FixupMembershipTransactions;
                    _membershipTransactions = newCollection;
                }
                return _membershipTransactions;
            }
            set
            {
                if (!ReferenceEquals(_membershipTransactions, value))
                {
                    var previousValue = _membershipTransactions as FixupCollection<MembershipTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMembershipTransactions;
                    }
                    _membershipTransactions = value;
                    var newValue = value as FixupCollection<MembershipTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMembershipTransactions;
                    }
                }
            }
        }
        private ICollection<MembershipTransaction> _membershipTransactions;
        
    
        [DataMember]
        public virtual ICollection<MembershipTransaction> MembershipTransactions1
        {
            get
            {
                if (_membershipTransactions1 == null)
                {
                    var newCollection = new FixupCollection<MembershipTransaction>();
                    newCollection.CollectionChanged += FixupMembershipTransactions1;
                    _membershipTransactions1 = newCollection;
                }
                return _membershipTransactions1;
            }
            set
            {
                if (!ReferenceEquals(_membershipTransactions1, value))
                {
                    var previousValue = _membershipTransactions1 as FixupCollection<MembershipTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMembershipTransactions1;
                    }
                    _membershipTransactions1 = value;
                    var newValue = value as FixupCollection<MembershipTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMembershipTransactions1;
                    }
                }
            }
        }
        private ICollection<MembershipTransaction> _membershipTransactions1;
        
    
        [DataMember]
        public virtual PackageMaster PackageMaster
        {
            get { return _packageMaster; }
            set
            {
                if (!ReferenceEquals(_packageMaster, value))
                {
                    var previousValue = _packageMaster;
                    _packageMaster = value;
                    FixupPackageMaster(previousValue);
                }
            }
        }
        private PackageMaster _packageMaster;
        
    
        [DataMember]
        public virtual ICollection<UpgradeTransaction> UpgradeTransactions
        {
            get
            {
                if (_upgradeTransactions == null)
                {
                    var newCollection = new FixupCollection<UpgradeTransaction>();
                    newCollection.CollectionChanged += FixupUpgradeTransactions;
                    _upgradeTransactions = newCollection;
                }
                return _upgradeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_upgradeTransactions, value))
                {
                    var previousValue = _upgradeTransactions as FixupCollection<UpgradeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUpgradeTransactions;
                    }
                    _upgradeTransactions = value;
                    var newValue = value as FixupCollection<UpgradeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUpgradeTransactions;
                    }
                }
            }
        }
        private ICollection<UpgradeTransaction> _upgradeTransactions;
        
    
        [DataMember]
        public virtual ICollection<UserSchemeTransaction> UserSchemeTransactions
        {
            get
            {
                if (_userSchemeTransactions == null)
                {
                    var newCollection = new FixupCollection<UserSchemeTransaction>();
                    newCollection.CollectionChanged += FixupUserSchemeTransactions;
                    _userSchemeTransactions = newCollection;
                }
                return _userSchemeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_userSchemeTransactions, value))
                {
                    var previousValue = _userSchemeTransactions as FixupCollection<UserSchemeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserSchemeTransactions;
                    }
                    _userSchemeTransactions = value;
                    var newValue = value as FixupCollection<UserSchemeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserSchemeTransactions;
                    }
                }
            }
        }
        private ICollection<UserSchemeTransaction> _userSchemeTransactions;

        #endregion

        #region Association Fixup
    
        private void FixupPackageMaster(PackageMaster previousValue)
        {
            if (previousValue != null && previousValue.SchemeMasters.Contains(this))
            {
                previousValue.SchemeMasters.Remove(this);
            }
    
            if (PackageMaster != null)
            {
                if (!PackageMaster.SchemeMasters.Contains(this))
                {
                    PackageMaster.SchemeMasters.Add(this);
                }
                if (PackageId != PackageMaster.ID)
                {
                    PackageId = PackageMaster.ID;
                }
            }
        }
    
        private void FixupAccessManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessManagement item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupCancellationMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CancellationMaster item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CancellationMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupCancellationTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CancellationTransaction item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CancellationTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupDowngradeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DowngradeTransaction item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DowngradeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupMemberships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Membership item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupMembershipTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MembershipTransaction item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MembershipTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupMembershipTransactions1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MembershipTransaction item in e.NewItems)
                {
                    item.SchemeMaster1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MembershipTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster1, this))
                    {
                        item.SchemeMaster1 = null;
                    }
                }
            }
        }
    
        private void FixupUpgradeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UpgradeTransaction item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UpgradeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }
    
        private void FixupUserSchemeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserSchemeTransaction item in e.NewItems)
                {
                    item.SchemeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserSchemeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchemeMaster, this))
                    {
                        item.SchemeMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
