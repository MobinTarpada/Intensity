//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessManagement))]
    [KnownType(typeof(Club))]
    [KnownType(typeof(LeadStatusMaster))]
    [KnownType(typeof(LeadTypeMaster))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(MembershipTransaction))]
    [KnownType(typeof(Payment))]
    [KnownType(typeof(LeadQuestionAnswer))]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadFollowup))]
    [KnownType(typeof(LeadPresentation))]
    [KnownType(typeof(LeadTransaction))]
    public partial class Lead
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string firstName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string lastName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string gender
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> dateOfBirth
        {
            get;
            set;
        }
        [DataMember]
        public virtual string address
        {
            get;
            set;
        }
        [DataMember]
        public virtual string city
        {
            get;
            set;
        }
        [DataMember]
        public virtual string pincode
        {
            get;
            set;
        }
        [DataMember]
        public virtual string mobileNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string otherContactNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string bestTimeToCall
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> responseTypeId
        {
            get;
            set;
        }
        [DataMember]
        public virtual long leadTypeId
        {
            get { return _leadTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadTypeId != value)
                    {
                        if (LeadTypeMaster != null && LeadTypeMaster.ID != value)
                        {
                            LeadTypeMaster = null;
                        }
                        _leadTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _leadTypeId;
        [DataMember]
        public virtual long clubId
        {
            get { return _clubId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clubId != value)
                    {
                        if (Club != null && Club.ID != value)
                        {
                            Club = null;
                        }
                        _clubId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual long userId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.ID != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _userId;
        [DataMember]
        public virtual string maritalStatus
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> anniversaryDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string occupation
        {
            get;
            set;
        }
        [DataMember]
        public virtual string employee
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Email
        {
            get;
            set;
        }
        [DataMember]
        public virtual string agreementNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string memberShipId
        {
            get;
            set;
        }
        [DataMember]
        public virtual string relationWtihMember
        {
            get;
            set;
        }
        [DataMember]
        public virtual string corporateId
        {
            get;
            set;
        }
        [DataMember]
        public virtual string companyName
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> leadStatusId
        {
            get { return _leadStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadStatusId != value)
                    {
                        if (LeadStatusMaster != null && LeadStatusMaster.ID != value)
                        {
                            LeadStatusMaster = null;
                        }
                        _leadStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _leadStatusId;
        [DataMember]
        public virtual bool isTransfer
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> transferTo
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> transferBy
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }
        [DataMember]
        public virtual string BirthDayRemarks
        {
            get;
            set;
        }
        [DataMember]
        public virtual string AnniversaryRemarks
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessManagement> AccessManagements
        {
            get
            {
                if (_accessManagements == null)
                {
                    var newCollection = new FixupCollection<AccessManagement>();
                    newCollection.CollectionChanged += FixupAccessManagements;
                    _accessManagements = newCollection;
                }
                return _accessManagements;
            }
            set
            {
                if (!ReferenceEquals(_accessManagements, value))
                {
                    var previousValue = _accessManagements as FixupCollection<AccessManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessManagements;
                    }
                    _accessManagements = value;
                    var newValue = value as FixupCollection<AccessManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessManagements;
                    }
                }
            }
        }
        private ICollection<AccessManagement> _accessManagements;
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual LeadStatusMaster LeadStatusMaster
        {
            get { return _leadStatusMaster; }
            set
            {
                if (!ReferenceEquals(_leadStatusMaster, value))
                {
                    var previousValue = _leadStatusMaster;
                    _leadStatusMaster = value;
                    FixupLeadStatusMaster(previousValue);
                }
            }
        }
        private LeadStatusMaster _leadStatusMaster;
        
    
        [DataMember]
        public virtual LeadTypeMaster LeadTypeMaster
        {
            get { return _leadTypeMaster; }
            set
            {
                if (!ReferenceEquals(_leadTypeMaster, value))
                {
                    var previousValue = _leadTypeMaster;
                    _leadTypeMaster = value;
                    FixupLeadTypeMaster(previousValue);
                }
            }
        }
        private LeadTypeMaster _leadTypeMaster;
        
    
        [DataMember]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
        
    
        [DataMember]
        public virtual ICollection<Membership> Memberships
        {
            get
            {
                if (_memberships == null)
                {
                    var newCollection = new FixupCollection<Membership>();
                    newCollection.CollectionChanged += FixupMemberships;
                    _memberships = newCollection;
                }
                return _memberships;
            }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships as FixupCollection<Membership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberships;
                    }
                    _memberships = value;
                    var newValue = value as FixupCollection<Membership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberships;
                    }
                }
            }
        }
        private ICollection<Membership> _memberships;
        
    
        [DataMember]
        public virtual ICollection<MembershipTransaction> MembershipTransactions
        {
            get
            {
                if (_membershipTransactions == null)
                {
                    var newCollection = new FixupCollection<MembershipTransaction>();
                    newCollection.CollectionChanged += FixupMembershipTransactions;
                    _membershipTransactions = newCollection;
                }
                return _membershipTransactions;
            }
            set
            {
                if (!ReferenceEquals(_membershipTransactions, value))
                {
                    var previousValue = _membershipTransactions as FixupCollection<MembershipTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMembershipTransactions;
                    }
                    _membershipTransactions = value;
                    var newValue = value as FixupCollection<MembershipTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMembershipTransactions;
                    }
                }
            }
        }
        private ICollection<MembershipTransaction> _membershipTransactions;
        
    
        [DataMember]
        public virtual ICollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    var newCollection = new FixupCollection<Payment>();
                    newCollection.CollectionChanged += FixupPayments;
                    _payments = newCollection;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    var previousValue = _payments as FixupCollection<Payment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    var newValue = value as FixupCollection<Payment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayments;
                    }
                }
            }
        }
        private ICollection<Payment> _payments;
        
    
        [DataMember]
        public virtual ICollection<LeadQuestionAnswer> LeadQuestionAnswers
        {
            get
            {
                if (_leadQuestionAnswers == null)
                {
                    var newCollection = new FixupCollection<LeadQuestionAnswer>();
                    newCollection.CollectionChanged += FixupLeadQuestionAnswers;
                    _leadQuestionAnswers = newCollection;
                }
                return _leadQuestionAnswers;
            }
            set
            {
                if (!ReferenceEquals(_leadQuestionAnswers, value))
                {
                    var previousValue = _leadQuestionAnswers as FixupCollection<LeadQuestionAnswer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadQuestionAnswers;
                    }
                    _leadQuestionAnswers = value;
                    var newValue = value as FixupCollection<LeadQuestionAnswer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadQuestionAnswers;
                    }
                }
            }
        }
        private ICollection<LeadQuestionAnswer> _leadQuestionAnswers;
        
    
        [DataMember]
        public virtual ICollection<LeadAppointment> LeadAppointments
        {
            get
            {
                if (_leadAppointments == null)
                {
                    var newCollection = new FixupCollection<LeadAppointment>();
                    newCollection.CollectionChanged += FixupLeadAppointments;
                    _leadAppointments = newCollection;
                }
                return _leadAppointments;
            }
            set
            {
                if (!ReferenceEquals(_leadAppointments, value))
                {
                    var previousValue = _leadAppointments as FixupCollection<LeadAppointment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadAppointments;
                    }
                    _leadAppointments = value;
                    var newValue = value as FixupCollection<LeadAppointment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadAppointments;
                    }
                }
            }
        }
        private ICollection<LeadAppointment> _leadAppointments;
        
    
        [DataMember]
        public virtual ICollection<LeadFollowup> LeadFollowups
        {
            get
            {
                if (_leadFollowups == null)
                {
                    var newCollection = new FixupCollection<LeadFollowup>();
                    newCollection.CollectionChanged += FixupLeadFollowups;
                    _leadFollowups = newCollection;
                }
                return _leadFollowups;
            }
            set
            {
                if (!ReferenceEquals(_leadFollowups, value))
                {
                    var previousValue = _leadFollowups as FixupCollection<LeadFollowup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadFollowups;
                    }
                    _leadFollowups = value;
                    var newValue = value as FixupCollection<LeadFollowup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadFollowups;
                    }
                }
            }
        }
        private ICollection<LeadFollowup> _leadFollowups;
        
    
        [DataMember]
        public virtual ICollection<LeadPresentation> LeadPresentations
        {
            get
            {
                if (_leadPresentations == null)
                {
                    var newCollection = new FixupCollection<LeadPresentation>();
                    newCollection.CollectionChanged += FixupLeadPresentations;
                    _leadPresentations = newCollection;
                }
                return _leadPresentations;
            }
            set
            {
                if (!ReferenceEquals(_leadPresentations, value))
                {
                    var previousValue = _leadPresentations as FixupCollection<LeadPresentation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadPresentations;
                    }
                    _leadPresentations = value;
                    var newValue = value as FixupCollection<LeadPresentation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadPresentations;
                    }
                }
            }
        }
        private ICollection<LeadPresentation> _leadPresentations;
        
    
        [DataMember]
        public virtual ICollection<LeadTransaction> LeadTransactions
        {
            get
            {
                if (_leadTransactions == null)
                {
                    var newCollection = new FixupCollection<LeadTransaction>();
                    newCollection.CollectionChanged += FixupLeadTransactions;
                    _leadTransactions = newCollection;
                }
                return _leadTransactions;
            }
            set
            {
                if (!ReferenceEquals(_leadTransactions, value))
                {
                    var previousValue = _leadTransactions as FixupCollection<LeadTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadTransactions;
                    }
                    _leadTransactions = value;
                    var newValue = value as FixupCollection<LeadTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadTransactions;
                    }
                }
            }
        }
        private ICollection<LeadTransaction> _leadTransactions;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.Leads.Contains(this))
            {
                previousValue.Leads.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.Leads.Contains(this))
                {
                    Club.Leads.Add(this);
                }
                if (clubId != Club.ID)
                {
                    clubId = Club.ID;
                }
            }
        }
    
        private void FixupLeadStatusMaster(LeadStatusMaster previousValue)
        {
            if (previousValue != null && previousValue.Leads.Contains(this))
            {
                previousValue.Leads.Remove(this);
            }
    
            if (LeadStatusMaster != null)
            {
                if (!LeadStatusMaster.Leads.Contains(this))
                {
                    LeadStatusMaster.Leads.Add(this);
                }
                if (leadStatusId != LeadStatusMaster.ID)
                {
                    leadStatusId = LeadStatusMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                leadStatusId = null;
            }
        }
    
        private void FixupLeadTypeMaster(LeadTypeMaster previousValue)
        {
            if (previousValue != null && previousValue.Leads.Contains(this))
            {
                previousValue.Leads.Remove(this);
            }
    
            if (LeadTypeMaster != null)
            {
                if (!LeadTypeMaster.Leads.Contains(this))
                {
                    LeadTypeMaster.Leads.Add(this);
                }
                if (leadTypeId != LeadTypeMaster.ID)
                {
                    leadTypeId = LeadTypeMaster.ID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Leads.Contains(this))
            {
                previousValue.Leads.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Leads.Contains(this))
                {
                    User.Leads.Add(this);
                }
                if (userId != User.ID)
                {
                    userId = User.ID;
                }
            }
        }
    
        private void FixupAccessManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessManagement item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupMemberships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Membership item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupMembershipTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MembershipTransaction item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MembershipTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupLeadQuestionAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadQuestionAnswer item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadQuestionAnswer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupLeadAppointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadAppointment item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadAppointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupLeadFollowups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadFollowup item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadFollowup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupLeadPresentations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadPresentation item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadPresentation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }
    
        private void FixupLeadTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadTransaction item in e.NewItems)
                {
                    item.Lead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lead, this))
                    {
                        item.Lead = null;
                    }
                }
            }
        }

        #endregion

    }
}
