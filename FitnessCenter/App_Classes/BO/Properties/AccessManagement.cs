//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(PackageMaster))]
    [KnownType(typeof(SchemeMaster))]
    public partial class AccessManagement
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> memberId
        {
            get { return _memberId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberId != value)
                    {
                        if (Membership != null && Membership.ID != value)
                        {
                            Membership = null;
                        }
                        _memberId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _memberId;
        [DataMember]
        public virtual Nullable<long> leadId
        {
            get { return _leadId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadId != value)
                    {
                        if (Lead != null && Lead.ID != value)
                        {
                            Lead = null;
                        }
                        _leadId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _leadId;
        [DataMember]
        public virtual Nullable<long> packageId
        {
            get { return _packageId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_packageId != value)
                    {
                        if (PackageMaster != null && PackageMaster.ID != value)
                        {
                            PackageMaster = null;
                        }
                        _packageId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _packageId;
        [DataMember]
        public virtual Nullable<long> userSchemeId
        {
            get { return _userSchemeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userSchemeId != value)
                    {
                        if (SchemeMaster != null && SchemeMaster.ID != value)
                        {
                            SchemeMaster = null;
                        }
                        _userSchemeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _userSchemeId;
        [DataMember]
        public virtual string Message
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Status
        {
            get;
            set;
        }
        [DataMember]
        public virtual string profilePicture
        {
            get;
            set;
        }
        [DataMember]
        public virtual string lastCheckInTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> lastCheckInDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string lastCheckInDays
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> insertDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Lead Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private Lead _lead;
        
    
        [DataMember]
        public virtual Membership Membership
        {
            get { return _membership; }
            set
            {
                if (!ReferenceEquals(_membership, value))
                {
                    var previousValue = _membership;
                    _membership = value;
                    FixupMembership(previousValue);
                }
            }
        }
        private Membership _membership;
        
    
        [DataMember]
        public virtual PackageMaster PackageMaster
        {
            get { return _packageMaster; }
            set
            {
                if (!ReferenceEquals(_packageMaster, value))
                {
                    var previousValue = _packageMaster;
                    _packageMaster = value;
                    FixupPackageMaster(previousValue);
                }
            }
        }
        private PackageMaster _packageMaster;
        
    
        [DataMember]
        public virtual SchemeMaster SchemeMaster
        {
            get { return _schemeMaster; }
            set
            {
                if (!ReferenceEquals(_schemeMaster, value))
                {
                    var previousValue = _schemeMaster;
                    _schemeMaster = value;
                    FixupSchemeMaster(previousValue);
                }
            }
        }
        private SchemeMaster _schemeMaster;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLead(Lead previousValue)
        {
            if (previousValue != null && previousValue.AccessManagements.Contains(this))
            {
                previousValue.AccessManagements.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.AccessManagements.Contains(this))
                {
                    Lead.AccessManagements.Add(this);
                }
                if (leadId != Lead.ID)
                {
                    leadId = Lead.ID;
                }
            }
            else if (!_settingFK)
            {
                leadId = null;
            }
        }
    
        private void FixupMembership(Membership previousValue)
        {
            if (previousValue != null && previousValue.AccessManagements.Contains(this))
            {
                previousValue.AccessManagements.Remove(this);
            }
    
            if (Membership != null)
            {
                if (!Membership.AccessManagements.Contains(this))
                {
                    Membership.AccessManagements.Add(this);
                }
                if (memberId != Membership.ID)
                {
                    memberId = Membership.ID;
                }
            }
            else if (!_settingFK)
            {
                memberId = null;
            }
        }
    
        private void FixupPackageMaster(PackageMaster previousValue)
        {
            if (previousValue != null && previousValue.AccessManagements.Contains(this))
            {
                previousValue.AccessManagements.Remove(this);
            }
    
            if (PackageMaster != null)
            {
                if (!PackageMaster.AccessManagements.Contains(this))
                {
                    PackageMaster.AccessManagements.Add(this);
                }
                if (packageId != PackageMaster.ID)
                {
                    packageId = PackageMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                packageId = null;
            }
        }
    
        private void FixupSchemeMaster(SchemeMaster previousValue)
        {
            if (previousValue != null && previousValue.AccessManagements.Contains(this))
            {
                previousValue.AccessManagements.Remove(this);
            }
    
            if (SchemeMaster != null)
            {
                if (!SchemeMaster.AccessManagements.Contains(this))
                {
                    SchemeMaster.AccessManagements.Add(this);
                }
                if (userSchemeId != SchemeMaster.ID)
                {
                    userSchemeId = SchemeMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                userSchemeId = null;
            }
        }

        #endregion

    }
}
