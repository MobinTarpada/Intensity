//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DepartmentMaster))]
    [KnownType(typeof(UserTypeMaster))]
    public partial class EmployeeMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long Id
        {
            get;
            set;
        }
        [DataMember]
        public virtual string FName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string LName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address1
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address2
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address3
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Mobile
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Email
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> DeptId
        {
            get { return _deptId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_deptId != value)
                    {
                        if (DepartmentMaster != null && DepartmentMaster.ID != value)
                        {
                            DepartmentMaster = null;
                        }
                        _deptId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _deptId;
        [DataMember]
        public virtual Nullable<long> UserTypeId
        {
            get { return _userTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userTypeId != value)
                    {
                        if (UserTypeMaster != null && UserTypeMaster.ID != value)
                        {
                            UserTypeMaster = null;
                        }
                        _userTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _userTypeId;
        [DataMember]
        public virtual string RFIDNO
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual DepartmentMaster DepartmentMaster
        {
            get { return _departmentMaster; }
            set
            {
                if (!ReferenceEquals(_departmentMaster, value))
                {
                    var previousValue = _departmentMaster;
                    _departmentMaster = value;
                    FixupDepartmentMaster(previousValue);
                }
            }
        }
        private DepartmentMaster _departmentMaster;
        
    
        [DataMember]
        public virtual UserTypeMaster UserTypeMaster
        {
            get { return _userTypeMaster; }
            set
            {
                if (!ReferenceEquals(_userTypeMaster, value))
                {
                    var previousValue = _userTypeMaster;
                    _userTypeMaster = value;
                    FixupUserTypeMaster(previousValue);
                }
            }
        }
        private UserTypeMaster _userTypeMaster;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDepartmentMaster(DepartmentMaster previousValue)
        {
            if (previousValue != null && previousValue.EmployeeMasters.Contains(this))
            {
                previousValue.EmployeeMasters.Remove(this);
            }
    
            if (DepartmentMaster != null)
            {
                if (!DepartmentMaster.EmployeeMasters.Contains(this))
                {
                    DepartmentMaster.EmployeeMasters.Add(this);
                }
                if (DeptId != DepartmentMaster.ID)
                {
                    DeptId = DepartmentMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                DeptId = null;
            }
        }
    
        private void FixupUserTypeMaster(UserTypeMaster previousValue)
        {
            if (previousValue != null && previousValue.EmployeeMasters.Contains(this))
            {
                previousValue.EmployeeMasters.Remove(this);
            }
    
            if (UserTypeMaster != null)
            {
                if (!UserTypeMaster.EmployeeMasters.Contains(this))
                {
                    UserTypeMaster.EmployeeMasters.Add(this);
                }
                if (UserTypeId != UserTypeMaster.ID)
                {
                    UserTypeId = UserTypeMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                UserTypeId = null;
            }
        }

        #endregion

    }
}
