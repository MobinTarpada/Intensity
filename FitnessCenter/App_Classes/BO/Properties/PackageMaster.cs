//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessManagement))]
    [KnownType(typeof(Club))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(SchemeMaster))]
    public partial class PackageMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual long ClubId
        {
            get { return _clubId; }
            set
            {
                if (_clubId != value)
                {
                    if (Club != null && Club.ID != value)
                    {
                        Club = null;
                    }
                    _clubId = value;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual string PackageName
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessManagement> AccessManagements
        {
            get
            {
                if (_accessManagements == null)
                {
                    var newCollection = new FixupCollection<AccessManagement>();
                    newCollection.CollectionChanged += FixupAccessManagements;
                    _accessManagements = newCollection;
                }
                return _accessManagements;
            }
            set
            {
                if (!ReferenceEquals(_accessManagements, value))
                {
                    var previousValue = _accessManagements as FixupCollection<AccessManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessManagements;
                    }
                    _accessManagements = value;
                    var newValue = value as FixupCollection<AccessManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessManagements;
                    }
                }
            }
        }
        private ICollection<AccessManagement> _accessManagements;
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<Membership> Memberships
        {
            get
            {
                if (_memberships == null)
                {
                    var newCollection = new FixupCollection<Membership>();
                    newCollection.CollectionChanged += FixupMemberships;
                    _memberships = newCollection;
                }
                return _memberships;
            }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships as FixupCollection<Membership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberships;
                    }
                    _memberships = value;
                    var newValue = value as FixupCollection<Membership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberships;
                    }
                }
            }
        }
        private ICollection<Membership> _memberships;
        
    
        [DataMember]
        public virtual ICollection<SchemeMaster> SchemeMasters
        {
            get
            {
                if (_schemeMasters == null)
                {
                    var newCollection = new FixupCollection<SchemeMaster>();
                    newCollection.CollectionChanged += FixupSchemeMasters;
                    _schemeMasters = newCollection;
                }
                return _schemeMasters;
            }
            set
            {
                if (!ReferenceEquals(_schemeMasters, value))
                {
                    var previousValue = _schemeMasters as FixupCollection<SchemeMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSchemeMasters;
                    }
                    _schemeMasters = value;
                    var newValue = value as FixupCollection<SchemeMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSchemeMasters;
                    }
                }
            }
        }
        private ICollection<SchemeMaster> _schemeMasters;

        #endregion

        #region Association Fixup
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.PackageMasters.Contains(this))
            {
                previousValue.PackageMasters.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.PackageMasters.Contains(this))
                {
                    Club.PackageMasters.Add(this);
                }
                if (ClubId != Club.ID)
                {
                    ClubId = Club.ID;
                }
            }
        }
    
        private void FixupAccessManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessManagement item in e.NewItems)
                {
                    item.PackageMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageMaster, this))
                    {
                        item.PackageMaster = null;
                    }
                }
            }
        }
    
        private void FixupMemberships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Membership item in e.NewItems)
                {
                    item.PackageMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageMaster, this))
                    {
                        item.PackageMaster = null;
                    }
                }
            }
        }
    
        private void FixupSchemeMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SchemeMaster item in e.NewItems)
                {
                    item.PackageMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SchemeMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageMaster, this))
                    {
                        item.PackageMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
