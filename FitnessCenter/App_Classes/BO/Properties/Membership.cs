//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessManagement))]
    [KnownType(typeof(CancellationTransaction))]
    [KnownType(typeof(Club))]
    [KnownType(typeof(Disclaimer))]
    [KnownType(typeof(DowngradeTransaction))]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(MeasurementMaster))]
    [KnownType(typeof(MemberItemSale))]
    [KnownType(typeof(MemberItemTotalSale))]
    [KnownType(typeof(MemberJuiceMaster))]
    [KnownType(typeof(MemberJuiceTransaction))]
    [KnownType(typeof(PackageMaster))]
    [KnownType(typeof(SchemeMaster))]
    [KnownType(typeof(MembershipTransaction))]
    [KnownType(typeof(Payment))]
    [KnownType(typeof(PTPMemberMaster))]
    [KnownType(typeof(PTPMemberTransaction))]
    [KnownType(typeof(TimeTransaction))]
    [KnownType(typeof(TowelHiringMaster))]
    [KnownType(typeof(TowelTransaction))]
    [KnownType(typeof(UpgradeTransaction))]
    [KnownType(typeof(User))]
    [KnownType(typeof(AssignExercise))]
    public partial class Membership
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Title
        {
            get;
            set;
        }
        [DataMember]
        public virtual long LeadId
        {
            get { return _leadId; }
            set
            {
                if (_leadId != value)
                {
                    if (Lead != null && Lead.ID != value)
                    {
                        Lead = null;
                    }
                    _leadId = value;
                }
            }
        }
        private long _leadId;
        [DataMember]
        public virtual long ClubId
        {
            get { return _clubId; }
            set
            {
                if (_clubId != value)
                {
                    if (Club != null && Club.ID != value)
                    {
                        Club = null;
                    }
                    _clubId = value;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual string AgreementNo
        {
            get;
            set;
        }
        [DataMember]
        public virtual string RFIDCardNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string MembershipNo
        {
            get;
            set;
        }
        [DataMember]
        public virtual string EmergencyContactName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string EmergencyContactNo
        {
            get;
            set;
        }
        [DataMember]
        public virtual string GuardianName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string GuardianRelation
        {
            get;
            set;
        }
        [DataMember]
        public virtual string GuardianSignature
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CorporateId
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CorporateName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CorporationSignature
        {
            get;
            set;
        }
        [DataMember]
        public virtual string SendMaterialsBy
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CompanySignature
        {
            get;
            set;
        }
        [DataMember]
        public virtual string MemberSignature
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ProfilePhoto
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> ActivationDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> RegistrationDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> ExpiryDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> Consultant
        {
            get;
            set;
        }
        [DataMember]
        public virtual long PackageId
        {
            get { return _packageId; }
            set
            {
                if (_packageId != value)
                {
                    if (PackageMaster != null && PackageMaster.ID != value)
                    {
                        PackageMaster = null;
                    }
                    _packageId = value;
                }
            }
        }
        private long _packageId;
        [DataMember]
        public virtual long SchemeId
        {
            get { return _schemeId; }
            set
            {
                if (_schemeId != value)
                {
                    if (SchemeMaster != null && SchemeMaster.ID != value)
                    {
                        SchemeMaster = null;
                    }
                    _schemeId = value;
                }
            }
        }
        private long _schemeId;
        [DataMember]
        public virtual string SchemeName
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> JoiningFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> AdminFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> MemberFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> PTFee
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> SGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> CGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> IGST
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> SGST_Amount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> CGST_Amount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> IGST_Amount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> PackageAmount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> DiscountAmount
        {
            get;
            set;
        }
        [DataMember]
        public virtual long DiscountGivenBy
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> FinalAmount
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> DurationMonth
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> TransferBy
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> TransferTo
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> TransferDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessManagement> AccessManagements
        {
            get
            {
                if (_accessManagements == null)
                {
                    var newCollection = new FixupCollection<AccessManagement>();
                    newCollection.CollectionChanged += FixupAccessManagements;
                    _accessManagements = newCollection;
                }
                return _accessManagements;
            }
            set
            {
                if (!ReferenceEquals(_accessManagements, value))
                {
                    var previousValue = _accessManagements as FixupCollection<AccessManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessManagements;
                    }
                    _accessManagements = value;
                    var newValue = value as FixupCollection<AccessManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessManagements;
                    }
                }
            }
        }
        private ICollection<AccessManagement> _accessManagements;
        
    
        [DataMember]
        public virtual ICollection<CancellationTransaction> CancellationTransactions
        {
            get
            {
                if (_cancellationTransactions == null)
                {
                    var newCollection = new FixupCollection<CancellationTransaction>();
                    newCollection.CollectionChanged += FixupCancellationTransactions;
                    _cancellationTransactions = newCollection;
                }
                return _cancellationTransactions;
            }
            set
            {
                if (!ReferenceEquals(_cancellationTransactions, value))
                {
                    var previousValue = _cancellationTransactions as FixupCollection<CancellationTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCancellationTransactions;
                    }
                    _cancellationTransactions = value;
                    var newValue = value as FixupCollection<CancellationTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCancellationTransactions;
                    }
                }
            }
        }
        private ICollection<CancellationTransaction> _cancellationTransactions;
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<Disclaimer> Disclaimers
        {
            get
            {
                if (_disclaimers == null)
                {
                    var newCollection = new FixupCollection<Disclaimer>();
                    newCollection.CollectionChanged += FixupDisclaimers;
                    _disclaimers = newCollection;
                }
                return _disclaimers;
            }
            set
            {
                if (!ReferenceEquals(_disclaimers, value))
                {
                    var previousValue = _disclaimers as FixupCollection<Disclaimer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimers;
                    }
                    _disclaimers = value;
                    var newValue = value as FixupCollection<Disclaimer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimers;
                    }
                }
            }
        }
        private ICollection<Disclaimer> _disclaimers;
        
    
        [DataMember]
        public virtual ICollection<DowngradeTransaction> DowngradeTransactions
        {
            get
            {
                if (_downgradeTransactions == null)
                {
                    var newCollection = new FixupCollection<DowngradeTransaction>();
                    newCollection.CollectionChanged += FixupDowngradeTransactions;
                    _downgradeTransactions = newCollection;
                }
                return _downgradeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_downgradeTransactions, value))
                {
                    var previousValue = _downgradeTransactions as FixupCollection<DowngradeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDowngradeTransactions;
                    }
                    _downgradeTransactions = value;
                    var newValue = value as FixupCollection<DowngradeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDowngradeTransactions;
                    }
                }
            }
        }
        private ICollection<DowngradeTransaction> _downgradeTransactions;
        
    
        [DataMember]
        public virtual Lead Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private Lead _lead;
        
    
        [DataMember]
        public virtual ICollection<MeasurementMaster> MeasurementMasters
        {
            get
            {
                if (_measurementMasters == null)
                {
                    var newCollection = new FixupCollection<MeasurementMaster>();
                    newCollection.CollectionChanged += FixupMeasurementMasters;
                    _measurementMasters = newCollection;
                }
                return _measurementMasters;
            }
            set
            {
                if (!ReferenceEquals(_measurementMasters, value))
                {
                    var previousValue = _measurementMasters as FixupCollection<MeasurementMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMeasurementMasters;
                    }
                    _measurementMasters = value;
                    var newValue = value as FixupCollection<MeasurementMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMeasurementMasters;
                    }
                }
            }
        }
        private ICollection<MeasurementMaster> _measurementMasters;
        
    
        [DataMember]
        public virtual ICollection<MemberItemSale> MemberItemSales
        {
            get
            {
                if (_memberItemSales == null)
                {
                    var newCollection = new FixupCollection<MemberItemSale>();
                    newCollection.CollectionChanged += FixupMemberItemSales;
                    _memberItemSales = newCollection;
                }
                return _memberItemSales;
            }
            set
            {
                if (!ReferenceEquals(_memberItemSales, value))
                {
                    var previousValue = _memberItemSales as FixupCollection<MemberItemSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberItemSales;
                    }
                    _memberItemSales = value;
                    var newValue = value as FixupCollection<MemberItemSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberItemSales;
                    }
                }
            }
        }
        private ICollection<MemberItemSale> _memberItemSales;
        
    
        [DataMember]
        public virtual ICollection<MemberItemTotalSale> MemberItemTotalSales
        {
            get
            {
                if (_memberItemTotalSales == null)
                {
                    var newCollection = new FixupCollection<MemberItemTotalSale>();
                    newCollection.CollectionChanged += FixupMemberItemTotalSales;
                    _memberItemTotalSales = newCollection;
                }
                return _memberItemTotalSales;
            }
            set
            {
                if (!ReferenceEquals(_memberItemTotalSales, value))
                {
                    var previousValue = _memberItemTotalSales as FixupCollection<MemberItemTotalSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberItemTotalSales;
                    }
                    _memberItemTotalSales = value;
                    var newValue = value as FixupCollection<MemberItemTotalSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberItemTotalSales;
                    }
                }
            }
        }
        private ICollection<MemberItemTotalSale> _memberItemTotalSales;
        
    
        [DataMember]
        public virtual ICollection<MemberJuiceMaster> MemberJuiceMasters
        {
            get
            {
                if (_memberJuiceMasters == null)
                {
                    var newCollection = new FixupCollection<MemberJuiceMaster>();
                    newCollection.CollectionChanged += FixupMemberJuiceMasters;
                    _memberJuiceMasters = newCollection;
                }
                return _memberJuiceMasters;
            }
            set
            {
                if (!ReferenceEquals(_memberJuiceMasters, value))
                {
                    var previousValue = _memberJuiceMasters as FixupCollection<MemberJuiceMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberJuiceMasters;
                    }
                    _memberJuiceMasters = value;
                    var newValue = value as FixupCollection<MemberJuiceMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberJuiceMasters;
                    }
                }
            }
        }
        private ICollection<MemberJuiceMaster> _memberJuiceMasters;
        
    
        [DataMember]
        public virtual ICollection<MemberJuiceTransaction> MemberJuiceTransactions
        {
            get
            {
                if (_memberJuiceTransactions == null)
                {
                    var newCollection = new FixupCollection<MemberJuiceTransaction>();
                    newCollection.CollectionChanged += FixupMemberJuiceTransactions;
                    _memberJuiceTransactions = newCollection;
                }
                return _memberJuiceTransactions;
            }
            set
            {
                if (!ReferenceEquals(_memberJuiceTransactions, value))
                {
                    var previousValue = _memberJuiceTransactions as FixupCollection<MemberJuiceTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberJuiceTransactions;
                    }
                    _memberJuiceTransactions = value;
                    var newValue = value as FixupCollection<MemberJuiceTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberJuiceTransactions;
                    }
                }
            }
        }
        private ICollection<MemberJuiceTransaction> _memberJuiceTransactions;
        
    
        [DataMember]
        public virtual PackageMaster PackageMaster
        {
            get { return _packageMaster; }
            set
            {
                if (!ReferenceEquals(_packageMaster, value))
                {
                    var previousValue = _packageMaster;
                    _packageMaster = value;
                    FixupPackageMaster(previousValue);
                }
            }
        }
        private PackageMaster _packageMaster;
        
    
        [DataMember]
        public virtual SchemeMaster SchemeMaster
        {
            get { return _schemeMaster; }
            set
            {
                if (!ReferenceEquals(_schemeMaster, value))
                {
                    var previousValue = _schemeMaster;
                    _schemeMaster = value;
                    FixupSchemeMaster(previousValue);
                }
            }
        }
        private SchemeMaster _schemeMaster;
        
    
        [DataMember]
        public virtual ICollection<MembershipTransaction> MembershipTransactions
        {
            get
            {
                if (_membershipTransactions == null)
                {
                    var newCollection = new FixupCollection<MembershipTransaction>();
                    newCollection.CollectionChanged += FixupMembershipTransactions;
                    _membershipTransactions = newCollection;
                }
                return _membershipTransactions;
            }
            set
            {
                if (!ReferenceEquals(_membershipTransactions, value))
                {
                    var previousValue = _membershipTransactions as FixupCollection<MembershipTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMembershipTransactions;
                    }
                    _membershipTransactions = value;
                    var newValue = value as FixupCollection<MembershipTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMembershipTransactions;
                    }
                }
            }
        }
        private ICollection<MembershipTransaction> _membershipTransactions;
        
    
        [DataMember]
        public virtual ICollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    var newCollection = new FixupCollection<Payment>();
                    newCollection.CollectionChanged += FixupPayments;
                    _payments = newCollection;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    var previousValue = _payments as FixupCollection<Payment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    var newValue = value as FixupCollection<Payment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayments;
                    }
                }
            }
        }
        private ICollection<Payment> _payments;
        
    
        [DataMember]
        public virtual ICollection<PTPMemberMaster> PTPMemberMasters
        {
            get
            {
                if (_pTPMemberMasters == null)
                {
                    var newCollection = new FixupCollection<PTPMemberMaster>();
                    newCollection.CollectionChanged += FixupPTPMemberMasters;
                    _pTPMemberMasters = newCollection;
                }
                return _pTPMemberMasters;
            }
            set
            {
                if (!ReferenceEquals(_pTPMemberMasters, value))
                {
                    var previousValue = _pTPMemberMasters as FixupCollection<PTPMemberMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPTPMemberMasters;
                    }
                    _pTPMemberMasters = value;
                    var newValue = value as FixupCollection<PTPMemberMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPTPMemberMasters;
                    }
                }
            }
        }
        private ICollection<PTPMemberMaster> _pTPMemberMasters;
        
    
        [DataMember]
        public virtual ICollection<PTPMemberTransaction> PTPMemberTransactions
        {
            get
            {
                if (_pTPMemberTransactions == null)
                {
                    var newCollection = new FixupCollection<PTPMemberTransaction>();
                    newCollection.CollectionChanged += FixupPTPMemberTransactions;
                    _pTPMemberTransactions = newCollection;
                }
                return _pTPMemberTransactions;
            }
            set
            {
                if (!ReferenceEquals(_pTPMemberTransactions, value))
                {
                    var previousValue = _pTPMemberTransactions as FixupCollection<PTPMemberTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPTPMemberTransactions;
                    }
                    _pTPMemberTransactions = value;
                    var newValue = value as FixupCollection<PTPMemberTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPTPMemberTransactions;
                    }
                }
            }
        }
        private ICollection<PTPMemberTransaction> _pTPMemberTransactions;
        
    
        [DataMember]
        public virtual ICollection<TimeTransaction> TimeTransactions
        {
            get
            {
                if (_timeTransactions == null)
                {
                    var newCollection = new FixupCollection<TimeTransaction>();
                    newCollection.CollectionChanged += FixupTimeTransactions;
                    _timeTransactions = newCollection;
                }
                return _timeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_timeTransactions, value))
                {
                    var previousValue = _timeTransactions as FixupCollection<TimeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTimeTransactions;
                    }
                    _timeTransactions = value;
                    var newValue = value as FixupCollection<TimeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTimeTransactions;
                    }
                }
            }
        }
        private ICollection<TimeTransaction> _timeTransactions;
        
    
        [DataMember]
        public virtual ICollection<TowelHiringMaster> TowelHiringMasters
        {
            get
            {
                if (_towelHiringMasters == null)
                {
                    var newCollection = new FixupCollection<TowelHiringMaster>();
                    newCollection.CollectionChanged += FixupTowelHiringMasters;
                    _towelHiringMasters = newCollection;
                }
                return _towelHiringMasters;
            }
            set
            {
                if (!ReferenceEquals(_towelHiringMasters, value))
                {
                    var previousValue = _towelHiringMasters as FixupCollection<TowelHiringMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTowelHiringMasters;
                    }
                    _towelHiringMasters = value;
                    var newValue = value as FixupCollection<TowelHiringMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTowelHiringMasters;
                    }
                }
            }
        }
        private ICollection<TowelHiringMaster> _towelHiringMasters;
        
    
        [DataMember]
        public virtual ICollection<TowelTransaction> TowelTransactions
        {
            get
            {
                if (_towelTransactions == null)
                {
                    var newCollection = new FixupCollection<TowelTransaction>();
                    newCollection.CollectionChanged += FixupTowelTransactions;
                    _towelTransactions = newCollection;
                }
                return _towelTransactions;
            }
            set
            {
                if (!ReferenceEquals(_towelTransactions, value))
                {
                    var previousValue = _towelTransactions as FixupCollection<TowelTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTowelTransactions;
                    }
                    _towelTransactions = value;
                    var newValue = value as FixupCollection<TowelTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTowelTransactions;
                    }
                }
            }
        }
        private ICollection<TowelTransaction> _towelTransactions;
        
    
        [DataMember]
        public virtual ICollection<UpgradeTransaction> UpgradeTransactions
        {
            get
            {
                if (_upgradeTransactions == null)
                {
                    var newCollection = new FixupCollection<UpgradeTransaction>();
                    newCollection.CollectionChanged += FixupUpgradeTransactions;
                    _upgradeTransactions = newCollection;
                }
                return _upgradeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_upgradeTransactions, value))
                {
                    var previousValue = _upgradeTransactions as FixupCollection<UpgradeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUpgradeTransactions;
                    }
                    _upgradeTransactions = value;
                    var newValue = value as FixupCollection<UpgradeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUpgradeTransactions;
                    }
                }
            }
        }
        private ICollection<UpgradeTransaction> _upgradeTransactions;
        
    
        [DataMember]
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
        
    
        [DataMember]
        public virtual ICollection<AssignExercise> AssignExercises
        {
            get
            {
                if (_assignExercises == null)
                {
                    var newCollection = new FixupCollection<AssignExercise>();
                    newCollection.CollectionChanged += FixupAssignExercises;
                    _assignExercises = newCollection;
                }
                return _assignExercises;
            }
            set
            {
                if (!ReferenceEquals(_assignExercises, value))
                {
                    var previousValue = _assignExercises as FixupCollection<AssignExercise>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAssignExercises;
                    }
                    _assignExercises = value;
                    var newValue = value as FixupCollection<AssignExercise>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAssignExercises;
                    }
                }
            }
        }
        private ICollection<AssignExercise> _assignExercises;

        #endregion

        #region Association Fixup
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.Memberships.Contains(this))
            {
                previousValue.Memberships.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.Memberships.Contains(this))
                {
                    Club.Memberships.Add(this);
                }
                if (ClubId != Club.ID)
                {
                    ClubId = Club.ID;
                }
            }
        }
    
        private void FixupLead(Lead previousValue)
        {
            if (previousValue != null && previousValue.Memberships.Contains(this))
            {
                previousValue.Memberships.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.Memberships.Contains(this))
                {
                    Lead.Memberships.Add(this);
                }
                if (LeadId != Lead.ID)
                {
                    LeadId = Lead.ID;
                }
            }
        }
    
        private void FixupPackageMaster(PackageMaster previousValue)
        {
            if (previousValue != null && previousValue.Memberships.Contains(this))
            {
                previousValue.Memberships.Remove(this);
            }
    
            if (PackageMaster != null)
            {
                if (!PackageMaster.Memberships.Contains(this))
                {
                    PackageMaster.Memberships.Add(this);
                }
                if (PackageId != PackageMaster.ID)
                {
                    PackageId = PackageMaster.ID;
                }
            }
        }
    
        private void FixupSchemeMaster(SchemeMaster previousValue)
        {
            if (previousValue != null && previousValue.Memberships.Contains(this))
            {
                previousValue.Memberships.Remove(this);
            }
    
            if (SchemeMaster != null)
            {
                if (!SchemeMaster.Memberships.Contains(this))
                {
                    SchemeMaster.Memberships.Add(this);
                }
                if (SchemeId != SchemeMaster.ID)
                {
                    SchemeId = SchemeMaster.ID;
                }
            }
        }
    
        private void FixupAccessManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessManagement item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupCancellationTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CancellationTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CancellationTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupDisclaimers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Disclaimer item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Disclaimer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupDowngradeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DowngradeTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DowngradeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMeasurementMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MeasurementMaster item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeasurementMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMemberItemSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberItemSale item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberItemSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMemberItemTotalSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberItemTotalSale item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberItemTotalSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMemberJuiceMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberJuiceMaster item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberJuiceMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMemberJuiceTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberJuiceTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberJuiceTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupMembershipTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MembershipTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MembershipTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupPTPMemberMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PTPMemberMaster item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PTPMemberMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupPTPMemberTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PTPMemberTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PTPMemberTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupTimeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TimeTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupTowelHiringMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TowelHiringMaster item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TowelHiringMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupTowelTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TowelTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TowelTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupUpgradeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UpgradeTransaction item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UpgradeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }
    
        private void FixupAssignExercises(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AssignExercise item in e.NewItems)
                {
                    item.Membership = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AssignExercise item in e.OldItems)
                {
                    if (ReferenceEquals(item.Membership, this))
                    {
                        item.Membership = null;
                    }
                }
            }
        }

        #endregion

    }
}
