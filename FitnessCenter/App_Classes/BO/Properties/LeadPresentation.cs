//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadFollowup))]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(User))]
    public partial class LeadPresentation
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime presentationDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual long leadId
        {
            get { return _leadId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadId != value)
                    {
                        if (Lead != null && Lead.ID != value)
                        {
                            Lead = null;
                        }
                        _leadId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _leadId;
        [DataMember]
        public virtual Nullable<long> appointmentId
        {
            get { return _appointmentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_appointmentId != value)
                    {
                        if (LeadAppointment != null && LeadAppointment.ID != value)
                        {
                            LeadAppointment = null;
                        }
                        _appointmentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _appointmentId;
        [DataMember]
        public virtual long userId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.ID != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _userId;
        [DataMember]
        public virtual Nullable<bool> isAttendPresentation
        {
            get;
            set;
        }
        [DataMember]
        public virtual string reasonsForNotAttend
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual LeadAppointment LeadAppointment
        {
            get { return _leadAppointment; }
            set
            {
                if (!ReferenceEquals(_leadAppointment, value))
                {
                    var previousValue = _leadAppointment;
                    _leadAppointment = value;
                    FixupLeadAppointment(previousValue);
                }
            }
        }
        private LeadAppointment _leadAppointment;
        
    
        [DataMember]
        public virtual ICollection<LeadFollowup> LeadFollowups
        {
            get
            {
                if (_leadFollowups == null)
                {
                    var newCollection = new FixupCollection<LeadFollowup>();
                    newCollection.CollectionChanged += FixupLeadFollowups;
                    _leadFollowups = newCollection;
                }
                return _leadFollowups;
            }
            set
            {
                if (!ReferenceEquals(_leadFollowups, value))
                {
                    var previousValue = _leadFollowups as FixupCollection<LeadFollowup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadFollowups;
                    }
                    _leadFollowups = value;
                    var newValue = value as FixupCollection<LeadFollowup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadFollowups;
                    }
                }
            }
        }
        private ICollection<LeadFollowup> _leadFollowups;
        
    
        [DataMember]
        public virtual Lead Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private Lead _lead;
        
    
        [DataMember]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLeadAppointment(LeadAppointment previousValue)
        {
            if (previousValue != null && previousValue.LeadPresentations.Contains(this))
            {
                previousValue.LeadPresentations.Remove(this);
            }
    
            if (LeadAppointment != null)
            {
                if (!LeadAppointment.LeadPresentations.Contains(this))
                {
                    LeadAppointment.LeadPresentations.Add(this);
                }
                if (appointmentId != LeadAppointment.ID)
                {
                    appointmentId = LeadAppointment.ID;
                }
            }
            else if (!_settingFK)
            {
                appointmentId = null;
            }
        }
    
        private void FixupLead(Lead previousValue)
        {
            if (previousValue != null && previousValue.LeadPresentations.Contains(this))
            {
                previousValue.LeadPresentations.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.LeadPresentations.Contains(this))
                {
                    Lead.LeadPresentations.Add(this);
                }
                if (leadId != Lead.ID)
                {
                    leadId = Lead.ID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.LeadPresentations.Contains(this))
            {
                previousValue.LeadPresentations.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.LeadPresentations.Contains(this))
                {
                    User.LeadPresentations.Add(this);
                }
                if (userId != User.ID)
                {
                    userId = User.ID;
                }
            }
        }
    
        private void FixupLeadFollowups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadFollowup item in e.NewItems)
                {
                    item.LeadPresentation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadFollowup item in e.OldItems)
                {
                    if (ReferenceEquals(item.LeadPresentation, this))
                    {
                        item.LeadPresentation = null;
                    }
                }
            }
        }

        #endregion

    }
}
