//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GroupMaster))]
    [KnownType(typeof(MemberItemSale))]
    [KnownType(typeof(MemberJuiceTransaction))]
    public partial class ItemMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string code
        {
            get;
            set;
        }
        [DataMember]
        public virtual string name
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal mrp
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> Inventory
        {
            get;
            set;
        }
        [DataMember]
        public virtual long groupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    if (GroupMaster != null && GroupMaster.ID != value)
                    {
                        GroupMaster = null;
                    }
                    _groupId = value;
                }
            }
        }
        private long _groupId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual GroupMaster GroupMaster
        {
            get { return _groupMaster; }
            set
            {
                if (!ReferenceEquals(_groupMaster, value))
                {
                    var previousValue = _groupMaster;
                    _groupMaster = value;
                    FixupGroupMaster(previousValue);
                }
            }
        }
        private GroupMaster _groupMaster;
        
    
        [DataMember]
        public virtual ICollection<MemberItemSale> MemberItemSales
        {
            get
            {
                if (_memberItemSales == null)
                {
                    var newCollection = new FixupCollection<MemberItemSale>();
                    newCollection.CollectionChanged += FixupMemberItemSales;
                    _memberItemSales = newCollection;
                }
                return _memberItemSales;
            }
            set
            {
                if (!ReferenceEquals(_memberItemSales, value))
                {
                    var previousValue = _memberItemSales as FixupCollection<MemberItemSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberItemSales;
                    }
                    _memberItemSales = value;
                    var newValue = value as FixupCollection<MemberItemSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberItemSales;
                    }
                }
            }
        }
        private ICollection<MemberItemSale> _memberItemSales;
        
    
        [DataMember]
        public virtual ICollection<MemberJuiceTransaction> MemberJuiceTransactions
        {
            get
            {
                if (_memberJuiceTransactions == null)
                {
                    var newCollection = new FixupCollection<MemberJuiceTransaction>();
                    newCollection.CollectionChanged += FixupMemberJuiceTransactions;
                    _memberJuiceTransactions = newCollection;
                }
                return _memberJuiceTransactions;
            }
            set
            {
                if (!ReferenceEquals(_memberJuiceTransactions, value))
                {
                    var previousValue = _memberJuiceTransactions as FixupCollection<MemberJuiceTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberJuiceTransactions;
                    }
                    _memberJuiceTransactions = value;
                    var newValue = value as FixupCollection<MemberJuiceTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberJuiceTransactions;
                    }
                }
            }
        }
        private ICollection<MemberJuiceTransaction> _memberJuiceTransactions;

        #endregion

        #region Association Fixup
    
        private void FixupGroupMaster(GroupMaster previousValue)
        {
            if (previousValue != null && previousValue.ItemMasters.Contains(this))
            {
                previousValue.ItemMasters.Remove(this);
            }
    
            if (GroupMaster != null)
            {
                if (!GroupMaster.ItemMasters.Contains(this))
                {
                    GroupMaster.ItemMasters.Add(this);
                }
                if (groupId != GroupMaster.ID)
                {
                    groupId = GroupMaster.ID;
                }
            }
        }
    
        private void FixupMemberItemSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberItemSale item in e.NewItems)
                {
                    item.ItemMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberItemSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemMaster, this))
                    {
                        item.ItemMaster = null;
                    }
                }
            }
        }
    
        private void FixupMemberJuiceTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberJuiceTransaction item in e.NewItems)
                {
                    item.ItemMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberJuiceTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemMaster, this))
                    {
                        item.ItemMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
