//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LeadQuestionOption))]
    [KnownType(typeof(LeadQuestionsMaster))]
    [KnownType(typeof(LeadQuestionAnswer))]
    public partial class LeadQuestionsMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string questions
        {
            get;
            set;
        }
        [DataMember]
        public virtual int questionTypeId
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> QuestionId
        {
            get { return _questionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_questionId != value)
                    {
                        if (LeadQuestionsMaster2 != null && LeadQuestionsMaster2.ID != value)
                        {
                            LeadQuestionsMaster2 = null;
                        }
                        _questionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _questionId;
        [DataMember]
        public virtual string SuperQuestionId
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> OptionId
        {
            get { return _optionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_optionId != value)
                    {
                        if (LeadQuestionOption != null && LeadQuestionOption.ID != value)
                        {
                            LeadQuestionOption = null;
                        }
                        _optionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _optionId;
        [DataMember]
        public virtual Nullable<long> PageId
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<LeadQuestionOption> LeadQuestionOptions
        {
            get
            {
                if (_leadQuestionOptions == null)
                {
                    var newCollection = new FixupCollection<LeadQuestionOption>();
                    newCollection.CollectionChanged += FixupLeadQuestionOptions;
                    _leadQuestionOptions = newCollection;
                }
                return _leadQuestionOptions;
            }
            set
            {
                if (!ReferenceEquals(_leadQuestionOptions, value))
                {
                    var previousValue = _leadQuestionOptions as FixupCollection<LeadQuestionOption>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadQuestionOptions;
                    }
                    _leadQuestionOptions = value;
                    var newValue = value as FixupCollection<LeadQuestionOption>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadQuestionOptions;
                    }
                }
            }
        }
        private ICollection<LeadQuestionOption> _leadQuestionOptions;
        
    
        [DataMember]
        public virtual LeadQuestionOption LeadQuestionOption
        {
            get { return _leadQuestionOption; }
            set
            {
                if (!ReferenceEquals(_leadQuestionOption, value))
                {
                    var previousValue = _leadQuestionOption;
                    _leadQuestionOption = value;
                    FixupLeadQuestionOption(previousValue);
                }
            }
        }
        private LeadQuestionOption _leadQuestionOption;
        
    
        [DataMember]
        public virtual ICollection<LeadQuestionsMaster> LeadQuestionsMaster1
        {
            get
            {
                if (_leadQuestionsMaster1 == null)
                {
                    var newCollection = new FixupCollection<LeadQuestionsMaster>();
                    newCollection.CollectionChanged += FixupLeadQuestionsMaster1;
                    _leadQuestionsMaster1 = newCollection;
                }
                return _leadQuestionsMaster1;
            }
            set
            {
                if (!ReferenceEquals(_leadQuestionsMaster1, value))
                {
                    var previousValue = _leadQuestionsMaster1 as FixupCollection<LeadQuestionsMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadQuestionsMaster1;
                    }
                    _leadQuestionsMaster1 = value;
                    var newValue = value as FixupCollection<LeadQuestionsMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadQuestionsMaster1;
                    }
                }
            }
        }
        private ICollection<LeadQuestionsMaster> _leadQuestionsMaster1;
        
    
        [DataMember]
        public virtual LeadQuestionsMaster LeadQuestionsMaster2
        {
            get { return _leadQuestionsMaster2; }
            set
            {
                if (!ReferenceEquals(_leadQuestionsMaster2, value))
                {
                    var previousValue = _leadQuestionsMaster2;
                    _leadQuestionsMaster2 = value;
                    FixupLeadQuestionsMaster2(previousValue);
                }
            }
        }
        private LeadQuestionsMaster _leadQuestionsMaster2;
        
    
        [DataMember]
        public virtual ICollection<LeadQuestionAnswer> LeadQuestionAnswers
        {
            get
            {
                if (_leadQuestionAnswers == null)
                {
                    var newCollection = new FixupCollection<LeadQuestionAnswer>();
                    newCollection.CollectionChanged += FixupLeadQuestionAnswers;
                    _leadQuestionAnswers = newCollection;
                }
                return _leadQuestionAnswers;
            }
            set
            {
                if (!ReferenceEquals(_leadQuestionAnswers, value))
                {
                    var previousValue = _leadQuestionAnswers as FixupCollection<LeadQuestionAnswer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadQuestionAnswers;
                    }
                    _leadQuestionAnswers = value;
                    var newValue = value as FixupCollection<LeadQuestionAnswer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadQuestionAnswers;
                    }
                }
            }
        }
        private ICollection<LeadQuestionAnswer> _leadQuestionAnswers;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLeadQuestionOption(LeadQuestionOption previousValue)
        {
            if (previousValue != null && previousValue.LeadQuestionsMasters.Contains(this))
            {
                previousValue.LeadQuestionsMasters.Remove(this);
            }
    
            if (LeadQuestionOption != null)
            {
                if (!LeadQuestionOption.LeadQuestionsMasters.Contains(this))
                {
                    LeadQuestionOption.LeadQuestionsMasters.Add(this);
                }
                if (OptionId != LeadQuestionOption.ID)
                {
                    OptionId = LeadQuestionOption.ID;
                }
            }
            else if (!_settingFK)
            {
                OptionId = null;
            }
        }
    
        private void FixupLeadQuestionsMaster2(LeadQuestionsMaster previousValue)
        {
            if (previousValue != null && previousValue.LeadQuestionsMaster1.Contains(this))
            {
                previousValue.LeadQuestionsMaster1.Remove(this);
            }
    
            if (LeadQuestionsMaster2 != null)
            {
                if (!LeadQuestionsMaster2.LeadQuestionsMaster1.Contains(this))
                {
                    LeadQuestionsMaster2.LeadQuestionsMaster1.Add(this);
                }
                if (QuestionId != LeadQuestionsMaster2.ID)
                {
                    QuestionId = LeadQuestionsMaster2.ID;
                }
            }
            else if (!_settingFK)
            {
                QuestionId = null;
            }
        }
    
        private void FixupLeadQuestionOptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadQuestionOption item in e.NewItems)
                {
                    item.LeadQuestionsMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadQuestionOption item in e.OldItems)
                {
                    if (ReferenceEquals(item.LeadQuestionsMaster, this))
                    {
                        item.LeadQuestionsMaster = null;
                    }
                }
            }
        }
    
        private void FixupLeadQuestionsMaster1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadQuestionsMaster item in e.NewItems)
                {
                    item.LeadQuestionsMaster2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadQuestionsMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.LeadQuestionsMaster2, this))
                    {
                        item.LeadQuestionsMaster2 = null;
                    }
                }
            }
        }
    
        private void FixupLeadQuestionAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadQuestionAnswer item in e.NewItems)
                {
                    item.LeadQuestionsMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadQuestionAnswer item in e.OldItems)
                {
                    if (ReferenceEquals(item.LeadQuestionsMaster, this))
                    {
                        item.LeadQuestionsMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
