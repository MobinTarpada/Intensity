//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Membership))]
    public partial class MeasurementMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual long memberId
        {
            get { return _memberId; }
            set
            {
                if (_memberId != value)
                {
                    if (Membership != null && Membership.ID != value)
                    {
                        Membership = null;
                    }
                    _memberId = value;
                }
            }
        }
        private long _memberId;
        [DataMember]
        public virtual string WEIGHT
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> HEIGHT
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> FAT
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<decimal> BMI
        {
            get;
            set;
        }
        [DataMember]
        public virtual string BMR
        {
            get;
            set;
        }
        [DataMember]
        public virtual string NECK
        {
            get;
            set;
        }
        [DataMember]
        public virtual string SHOULDER
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CHEST
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ARMS
        {
            get;
            set;
        }
        [DataMember]
        public virtual string WAIST
        {
            get;
            set;
        }
        [DataMember]
        public virtual string HIPS
        {
            get;
            set;
        }
        [DataMember]
        public virtual string THIGH
        {
            get;
            set;
        }
        [DataMember]
        public virtual string CALF
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDelete
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Membership Membership
        {
            get { return _membership; }
            set
            {
                if (!ReferenceEquals(_membership, value))
                {
                    var previousValue = _membership;
                    _membership = value;
                    FixupMembership(previousValue);
                }
            }
        }
        private Membership _membership;

        #endregion

        #region Association Fixup
    
        private void FixupMembership(Membership previousValue)
        {
            if (previousValue != null && previousValue.MeasurementMasters.Contains(this))
            {
                previousValue.MeasurementMasters.Remove(this);
            }
    
            if (Membership != null)
            {
                if (!Membership.MeasurementMasters.Contains(this))
                {
                    Membership.MeasurementMasters.Add(this);
                }
                if (memberId != Membership.ID)
                {
                    memberId = Membership.ID;
                }
            }
        }

        #endregion

    }
}
