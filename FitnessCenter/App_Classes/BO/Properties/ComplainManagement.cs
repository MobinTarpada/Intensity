//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Club))]
    [KnownType(typeof(User))]
    public partial class ComplainManagement
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual long userId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.ID != value)
                    {
                        User = null;
                    }
                    _userId = value;
                }
            }
        }
        private long _userId;
        [DataMember]
        public virtual long clubId
        {
            get { return _clubId; }
            set
            {
                if (_clubId != value)
                {
                    if (Club != null && Club.ID != value)
                    {
                        Club = null;
                    }
                    _clubId = value;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual string ComplainCode
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ComplainMessage
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Status
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Feedback
        {
            get;
            set;
        }
        [DataMember]
        public virtual string updateBy
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.ComplainManagements.Contains(this))
            {
                previousValue.ComplainManagements.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.ComplainManagements.Contains(this))
                {
                    Club.ComplainManagements.Add(this);
                }
                if (clubId != Club.ID)
                {
                    clubId = Club.ID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.ComplainManagements.Contains(this))
            {
                previousValue.ComplainManagements.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.ComplainManagements.Contains(this))
                {
                    User.ComplainManagements.Add(this);
                }
                if (userId != User.ID)
                {
                    userId = User.ID;
                }
            }
        }

        #endregion

    }
}
