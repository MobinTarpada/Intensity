//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Club))]
    [KnownType(typeof(EmployeeMaster))]
    [KnownType(typeof(User))]
    [KnownType(typeof(UserTypeMaster))]
    public partial class DepartmentMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string DeptName
        {
            get;
            set;
        }
        [DataMember]
        public virtual long ClubId
        {
            get { return _clubId; }
            set
            {
                if (_clubId != value)
                {
                    if (Club != null && Club.ID != value)
                    {
                        Club = null;
                    }
                    _clubId = value;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<EmployeeMaster> EmployeeMasters
        {
            get
            {
                if (_employeeMasters == null)
                {
                    var newCollection = new FixupCollection<EmployeeMaster>();
                    newCollection.CollectionChanged += FixupEmployeeMasters;
                    _employeeMasters = newCollection;
                }
                return _employeeMasters;
            }
            set
            {
                if (!ReferenceEquals(_employeeMasters, value))
                {
                    var previousValue = _employeeMasters as FixupCollection<EmployeeMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeMasters;
                    }
                    _employeeMasters = value;
                    var newValue = value as FixupCollection<EmployeeMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeMasters;
                    }
                }
            }
        }
        private ICollection<EmployeeMaster> _employeeMasters;
        
    
        [DataMember]
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
        
    
        [DataMember]
        public virtual ICollection<UserTypeMaster> UserTypeMasters
        {
            get
            {
                if (_userTypeMasters == null)
                {
                    var newCollection = new FixupCollection<UserTypeMaster>();
                    newCollection.CollectionChanged += FixupUserTypeMasters;
                    _userTypeMasters = newCollection;
                }
                return _userTypeMasters;
            }
            set
            {
                if (!ReferenceEquals(_userTypeMasters, value))
                {
                    var previousValue = _userTypeMasters as FixupCollection<UserTypeMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTypeMasters;
                    }
                    _userTypeMasters = value;
                    var newValue = value as FixupCollection<UserTypeMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTypeMasters;
                    }
                }
            }
        }
        private ICollection<UserTypeMaster> _userTypeMasters;

        #endregion

        #region Association Fixup
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.DepartmentMasters.Contains(this))
            {
                previousValue.DepartmentMasters.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.DepartmentMasters.Contains(this))
                {
                    Club.DepartmentMasters.Add(this);
                }
                if (ClubId != Club.ID)
                {
                    ClubId = Club.ID;
                }
            }
        }
    
        private void FixupEmployeeMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeMaster item in e.NewItems)
                {
                    item.DepartmentMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.DepartmentMaster, this))
                    {
                        item.DepartmentMaster = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.DepartmentMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.DepartmentMaster, this))
                    {
                        item.DepartmentMaster = null;
                    }
                }
            }
        }
    
        private void FixupUserTypeMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTypeMaster item in e.NewItems)
                {
                    item.DepartmentMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTypeMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.DepartmentMaster, this))
                    {
                        item.DepartmentMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
