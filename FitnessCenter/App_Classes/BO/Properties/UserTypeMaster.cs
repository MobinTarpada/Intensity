//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DepartmentMaster))]
    [KnownType(typeof(EmployeeMaster))]
    [KnownType(typeof(User))]
    [KnownType(typeof(UserSchemeTransaction))]
    public partial class UserTypeMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string TypeName
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> DepartmentId
        {
            get { return _departmentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_departmentId != value)
                    {
                        if (DepartmentMaster != null && DepartmentMaster.ID != value)
                        {
                            DepartmentMaster = null;
                        }
                        _departmentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _departmentId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual DepartmentMaster DepartmentMaster
        {
            get { return _departmentMaster; }
            set
            {
                if (!ReferenceEquals(_departmentMaster, value))
                {
                    var previousValue = _departmentMaster;
                    _departmentMaster = value;
                    FixupDepartmentMaster(previousValue);
                }
            }
        }
        private DepartmentMaster _departmentMaster;
        
    
        [DataMember]
        public virtual ICollection<EmployeeMaster> EmployeeMasters
        {
            get
            {
                if (_employeeMasters == null)
                {
                    var newCollection = new FixupCollection<EmployeeMaster>();
                    newCollection.CollectionChanged += FixupEmployeeMasters;
                    _employeeMasters = newCollection;
                }
                return _employeeMasters;
            }
            set
            {
                if (!ReferenceEquals(_employeeMasters, value))
                {
                    var previousValue = _employeeMasters as FixupCollection<EmployeeMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeMasters;
                    }
                    _employeeMasters = value;
                    var newValue = value as FixupCollection<EmployeeMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeMasters;
                    }
                }
            }
        }
        private ICollection<EmployeeMaster> _employeeMasters;
        
    
        [DataMember]
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
        
    
        [DataMember]
        public virtual ICollection<UserSchemeTransaction> UserSchemeTransactions
        {
            get
            {
                if (_userSchemeTransactions == null)
                {
                    var newCollection = new FixupCollection<UserSchemeTransaction>();
                    newCollection.CollectionChanged += FixupUserSchemeTransactions;
                    _userSchemeTransactions = newCollection;
                }
                return _userSchemeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_userSchemeTransactions, value))
                {
                    var previousValue = _userSchemeTransactions as FixupCollection<UserSchemeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserSchemeTransactions;
                    }
                    _userSchemeTransactions = value;
                    var newValue = value as FixupCollection<UserSchemeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserSchemeTransactions;
                    }
                }
            }
        }
        private ICollection<UserSchemeTransaction> _userSchemeTransactions;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDepartmentMaster(DepartmentMaster previousValue)
        {
            if (previousValue != null && previousValue.UserTypeMasters.Contains(this))
            {
                previousValue.UserTypeMasters.Remove(this);
            }
    
            if (DepartmentMaster != null)
            {
                if (!DepartmentMaster.UserTypeMasters.Contains(this))
                {
                    DepartmentMaster.UserTypeMasters.Add(this);
                }
                if (DepartmentId != DepartmentMaster.ID)
                {
                    DepartmentId = DepartmentMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                DepartmentId = null;
            }
        }
    
        private void FixupEmployeeMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeMaster item in e.NewItems)
                {
                    item.UserTypeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserTypeMaster, this))
                    {
                        item.UserTypeMaster = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.UserTypeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserTypeMaster, this))
                    {
                        item.UserTypeMaster = null;
                    }
                }
            }
        }
    
        private void FixupUserSchemeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserSchemeTransaction item in e.NewItems)
                {
                    item.UserTypeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserSchemeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserTypeMaster, this))
                    {
                        item.UserTypeMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
