//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessMaster))]
    [KnownType(typeof(Club))]
    [KnownType(typeof(ComplainManagement))]
    [KnownType(typeof(DepartmentMaster))]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(UserTypeMaster))]
    [KnownType(typeof(UserTarget))]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadPresentation))]
    public partial class User
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string FirstName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string LastName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Email
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ProfilePicture
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Mobile
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address1
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address2
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Address3
        {
            get;
            set;
        }
        [DataMember]
        public virtual string UserName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Password
        {
            get;
            set;
        }
        [DataMember]
        public virtual long ClubId
        {
            get { return _clubId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clubId != value)
                    {
                        if (Club != null && Club.ID != value)
                        {
                            Club = null;
                        }
                        _clubId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual Nullable<long> DepartmentId
        {
            get { return _departmentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_departmentId != value)
                    {
                        if (DepartmentMaster != null && DepartmentMaster.ID != value)
                        {
                            DepartmentMaster = null;
                        }
                        _departmentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _departmentId;
        [DataMember]
        public virtual long UserTypeId
        {
            get { return _userTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userTypeId != value)
                    {
                        if (UserTypeMaster != null && UserTypeMaster.ID != value)
                        {
                            UserTypeMaster = null;
                        }
                        _userTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _userTypeId;
        [DataMember]
        public virtual Nullable<long> MemberId
        {
            get { return _memberId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberId != value)
                    {
                        if (Membership != null && Membership.ID != value)
                        {
                            Membership = null;
                        }
                        _memberId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _memberId;
        [DataMember]
        public virtual string OTP
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> OTPDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessMaster> AccessMasters
        {
            get
            {
                if (_accessMasters == null)
                {
                    var newCollection = new FixupCollection<AccessMaster>();
                    newCollection.CollectionChanged += FixupAccessMasters;
                    _accessMasters = newCollection;
                }
                return _accessMasters;
            }
            set
            {
                if (!ReferenceEquals(_accessMasters, value))
                {
                    var previousValue = _accessMasters as FixupCollection<AccessMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessMasters;
                    }
                    _accessMasters = value;
                    var newValue = value as FixupCollection<AccessMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessMasters;
                    }
                }
            }
        }
        private ICollection<AccessMaster> _accessMasters;
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<ComplainManagement> ComplainManagements
        {
            get
            {
                if (_complainManagements == null)
                {
                    var newCollection = new FixupCollection<ComplainManagement>();
                    newCollection.CollectionChanged += FixupComplainManagements;
                    _complainManagements = newCollection;
                }
                return _complainManagements;
            }
            set
            {
                if (!ReferenceEquals(_complainManagements, value))
                {
                    var previousValue = _complainManagements as FixupCollection<ComplainManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComplainManagements;
                    }
                    _complainManagements = value;
                    var newValue = value as FixupCollection<ComplainManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComplainManagements;
                    }
                }
            }
        }
        private ICollection<ComplainManagement> _complainManagements;
        
    
        [DataMember]
        public virtual DepartmentMaster DepartmentMaster
        {
            get { return _departmentMaster; }
            set
            {
                if (!ReferenceEquals(_departmentMaster, value))
                {
                    var previousValue = _departmentMaster;
                    _departmentMaster = value;
                    FixupDepartmentMaster(previousValue);
                }
            }
        }
        private DepartmentMaster _departmentMaster;
        
    
        [DataMember]
        public virtual ICollection<Lead> Leads
        {
            get
            {
                if (_leads == null)
                {
                    var newCollection = new FixupCollection<Lead>();
                    newCollection.CollectionChanged += FixupLeads;
                    _leads = newCollection;
                }
                return _leads;
            }
            set
            {
                if (!ReferenceEquals(_leads, value))
                {
                    var previousValue = _leads as FixupCollection<Lead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeads;
                    }
                    _leads = value;
                    var newValue = value as FixupCollection<Lead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeads;
                    }
                }
            }
        }
        private ICollection<Lead> _leads;
        
    
        [DataMember]
        public virtual Membership Membership
        {
            get { return _membership; }
            set
            {
                if (!ReferenceEquals(_membership, value))
                {
                    var previousValue = _membership;
                    _membership = value;
                    FixupMembership(previousValue);
                }
            }
        }
        private Membership _membership;
        
    
        [DataMember]
        public virtual UserTypeMaster UserTypeMaster
        {
            get { return _userTypeMaster; }
            set
            {
                if (!ReferenceEquals(_userTypeMaster, value))
                {
                    var previousValue = _userTypeMaster;
                    _userTypeMaster = value;
                    FixupUserTypeMaster(previousValue);
                }
            }
        }
        private UserTypeMaster _userTypeMaster;
        
    
        [DataMember]
        public virtual ICollection<UserTarget> UserTargets
        {
            get
            {
                if (_userTargets == null)
                {
                    var newCollection = new FixupCollection<UserTarget>();
                    newCollection.CollectionChanged += FixupUserTargets;
                    _userTargets = newCollection;
                }
                return _userTargets;
            }
            set
            {
                if (!ReferenceEquals(_userTargets, value))
                {
                    var previousValue = _userTargets as FixupCollection<UserTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTargets;
                    }
                    _userTargets = value;
                    var newValue = value as FixupCollection<UserTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTargets;
                    }
                }
            }
        }
        private ICollection<UserTarget> _userTargets;
        
    
        [DataMember]
        public virtual ICollection<LeadAppointment> LeadAppointments
        {
            get
            {
                if (_leadAppointments == null)
                {
                    var newCollection = new FixupCollection<LeadAppointment>();
                    newCollection.CollectionChanged += FixupLeadAppointments;
                    _leadAppointments = newCollection;
                }
                return _leadAppointments;
            }
            set
            {
                if (!ReferenceEquals(_leadAppointments, value))
                {
                    var previousValue = _leadAppointments as FixupCollection<LeadAppointment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadAppointments;
                    }
                    _leadAppointments = value;
                    var newValue = value as FixupCollection<LeadAppointment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadAppointments;
                    }
                }
            }
        }
        private ICollection<LeadAppointment> _leadAppointments;
        
    
        [DataMember]
        public virtual ICollection<LeadPresentation> LeadPresentations
        {
            get
            {
                if (_leadPresentations == null)
                {
                    var newCollection = new FixupCollection<LeadPresentation>();
                    newCollection.CollectionChanged += FixupLeadPresentations;
                    _leadPresentations = newCollection;
                }
                return _leadPresentations;
            }
            set
            {
                if (!ReferenceEquals(_leadPresentations, value))
                {
                    var previousValue = _leadPresentations as FixupCollection<LeadPresentation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadPresentations;
                    }
                    _leadPresentations = value;
                    var newValue = value as FixupCollection<LeadPresentation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadPresentations;
                    }
                }
            }
        }
        private ICollection<LeadPresentation> _leadPresentations;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.Users.Contains(this))
                {
                    Club.Users.Add(this);
                }
                if (ClubId != Club.ID)
                {
                    ClubId = Club.ID;
                }
            }
        }
    
        private void FixupDepartmentMaster(DepartmentMaster previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (DepartmentMaster != null)
            {
                if (!DepartmentMaster.Users.Contains(this))
                {
                    DepartmentMaster.Users.Add(this);
                }
                if (DepartmentId != DepartmentMaster.ID)
                {
                    DepartmentId = DepartmentMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                DepartmentId = null;
            }
        }
    
        private void FixupMembership(Membership previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Membership != null)
            {
                if (!Membership.Users.Contains(this))
                {
                    Membership.Users.Add(this);
                }
                if (MemberId != Membership.ID)
                {
                    MemberId = Membership.ID;
                }
            }
            else if (!_settingFK)
            {
                MemberId = null;
            }
        }
    
        private void FixupUserTypeMaster(UserTypeMaster previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (UserTypeMaster != null)
            {
                if (!UserTypeMaster.Users.Contains(this))
                {
                    UserTypeMaster.Users.Add(this);
                }
                if (UserTypeId != UserTypeMaster.ID)
                {
                    UserTypeId = UserTypeMaster.ID;
                }
            }
        }
    
        private void FixupAccessMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessMaster item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupComplainManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ComplainManagement item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ComplainManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lead item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lead item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTarget item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeadAppointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadAppointment item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadAppointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeadPresentations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadPresentation item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadPresentation item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    }
}
