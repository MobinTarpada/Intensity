//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessMaster))]
    [KnownType(typeof(ComplainManagement))]
    [KnownType(typeof(DepartmentMaster))]
    [KnownType(typeof(Disclaimer))]
    [KnownType(typeof(GroupMaster))]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(PackageMaster))]
    [KnownType(typeof(Payment))]
    [KnownType(typeof(PTPPackageMaster))]
    [KnownType(typeof(TowelHiringPackage))]
    [KnownType(typeof(User))]
    [KnownType(typeof(UserTarget))]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadTransaction))]
    public partial class Club
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string clubName
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> startDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> endDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessMaster> AccessMasters
        {
            get
            {
                if (_accessMasters == null)
                {
                    var newCollection = new FixupCollection<AccessMaster>();
                    newCollection.CollectionChanged += FixupAccessMasters;
                    _accessMasters = newCollection;
                }
                return _accessMasters;
            }
            set
            {
                if (!ReferenceEquals(_accessMasters, value))
                {
                    var previousValue = _accessMasters as FixupCollection<AccessMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessMasters;
                    }
                    _accessMasters = value;
                    var newValue = value as FixupCollection<AccessMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessMasters;
                    }
                }
            }
        }
        private ICollection<AccessMaster> _accessMasters;
        
    
        [DataMember]
        public virtual ICollection<ComplainManagement> ComplainManagements
        {
            get
            {
                if (_complainManagements == null)
                {
                    var newCollection = new FixupCollection<ComplainManagement>();
                    newCollection.CollectionChanged += FixupComplainManagements;
                    _complainManagements = newCollection;
                }
                return _complainManagements;
            }
            set
            {
                if (!ReferenceEquals(_complainManagements, value))
                {
                    var previousValue = _complainManagements as FixupCollection<ComplainManagement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComplainManagements;
                    }
                    _complainManagements = value;
                    var newValue = value as FixupCollection<ComplainManagement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComplainManagements;
                    }
                }
            }
        }
        private ICollection<ComplainManagement> _complainManagements;
        
    
        [DataMember]
        public virtual ICollection<DepartmentMaster> DepartmentMasters
        {
            get
            {
                if (_departmentMasters == null)
                {
                    var newCollection = new FixupCollection<DepartmentMaster>();
                    newCollection.CollectionChanged += FixupDepartmentMasters;
                    _departmentMasters = newCollection;
                }
                return _departmentMasters;
            }
            set
            {
                if (!ReferenceEquals(_departmentMasters, value))
                {
                    var previousValue = _departmentMasters as FixupCollection<DepartmentMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepartmentMasters;
                    }
                    _departmentMasters = value;
                    var newValue = value as FixupCollection<DepartmentMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepartmentMasters;
                    }
                }
            }
        }
        private ICollection<DepartmentMaster> _departmentMasters;
        
    
        [DataMember]
        public virtual ICollection<Disclaimer> Disclaimers
        {
            get
            {
                if (_disclaimers == null)
                {
                    var newCollection = new FixupCollection<Disclaimer>();
                    newCollection.CollectionChanged += FixupDisclaimers;
                    _disclaimers = newCollection;
                }
                return _disclaimers;
            }
            set
            {
                if (!ReferenceEquals(_disclaimers, value))
                {
                    var previousValue = _disclaimers as FixupCollection<Disclaimer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimers;
                    }
                    _disclaimers = value;
                    var newValue = value as FixupCollection<Disclaimer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimers;
                    }
                }
            }
        }
        private ICollection<Disclaimer> _disclaimers;
        
    
        [DataMember]
        public virtual ICollection<GroupMaster> GroupMasters
        {
            get
            {
                if (_groupMasters == null)
                {
                    var newCollection = new FixupCollection<GroupMaster>();
                    newCollection.CollectionChanged += FixupGroupMasters;
                    _groupMasters = newCollection;
                }
                return _groupMasters;
            }
            set
            {
                if (!ReferenceEquals(_groupMasters, value))
                {
                    var previousValue = _groupMasters as FixupCollection<GroupMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGroupMasters;
                    }
                    _groupMasters = value;
                    var newValue = value as FixupCollection<GroupMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGroupMasters;
                    }
                }
            }
        }
        private ICollection<GroupMaster> _groupMasters;
        
    
        [DataMember]
        public virtual ICollection<Lead> Leads
        {
            get
            {
                if (_leads == null)
                {
                    var newCollection = new FixupCollection<Lead>();
                    newCollection.CollectionChanged += FixupLeads;
                    _leads = newCollection;
                }
                return _leads;
            }
            set
            {
                if (!ReferenceEquals(_leads, value))
                {
                    var previousValue = _leads as FixupCollection<Lead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeads;
                    }
                    _leads = value;
                    var newValue = value as FixupCollection<Lead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeads;
                    }
                }
            }
        }
        private ICollection<Lead> _leads;
        
    
        [DataMember]
        public virtual ICollection<Membership> Memberships
        {
            get
            {
                if (_memberships == null)
                {
                    var newCollection = new FixupCollection<Membership>();
                    newCollection.CollectionChanged += FixupMemberships;
                    _memberships = newCollection;
                }
                return _memberships;
            }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships as FixupCollection<Membership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberships;
                    }
                    _memberships = value;
                    var newValue = value as FixupCollection<Membership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberships;
                    }
                }
            }
        }
        private ICollection<Membership> _memberships;
        
    
        [DataMember]
        public virtual ICollection<PackageMaster> PackageMasters
        {
            get
            {
                if (_packageMasters == null)
                {
                    var newCollection = new FixupCollection<PackageMaster>();
                    newCollection.CollectionChanged += FixupPackageMasters;
                    _packageMasters = newCollection;
                }
                return _packageMasters;
            }
            set
            {
                if (!ReferenceEquals(_packageMasters, value))
                {
                    var previousValue = _packageMasters as FixupCollection<PackageMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPackageMasters;
                    }
                    _packageMasters = value;
                    var newValue = value as FixupCollection<PackageMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPackageMasters;
                    }
                }
            }
        }
        private ICollection<PackageMaster> _packageMasters;
        
    
        [DataMember]
        public virtual ICollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    var newCollection = new FixupCollection<Payment>();
                    newCollection.CollectionChanged += FixupPayments;
                    _payments = newCollection;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    var previousValue = _payments as FixupCollection<Payment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    var newValue = value as FixupCollection<Payment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayments;
                    }
                }
            }
        }
        private ICollection<Payment> _payments;
        
    
        [DataMember]
        public virtual ICollection<PTPPackageMaster> PTPPackageMasters
        {
            get
            {
                if (_pTPPackageMasters == null)
                {
                    var newCollection = new FixupCollection<PTPPackageMaster>();
                    newCollection.CollectionChanged += FixupPTPPackageMasters;
                    _pTPPackageMasters = newCollection;
                }
                return _pTPPackageMasters;
            }
            set
            {
                if (!ReferenceEquals(_pTPPackageMasters, value))
                {
                    var previousValue = _pTPPackageMasters as FixupCollection<PTPPackageMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPTPPackageMasters;
                    }
                    _pTPPackageMasters = value;
                    var newValue = value as FixupCollection<PTPPackageMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPTPPackageMasters;
                    }
                }
            }
        }
        private ICollection<PTPPackageMaster> _pTPPackageMasters;
        
    
        [DataMember]
        public virtual ICollection<TowelHiringPackage> TowelHiringPackages
        {
            get
            {
                if (_towelHiringPackages == null)
                {
                    var newCollection = new FixupCollection<TowelHiringPackage>();
                    newCollection.CollectionChanged += FixupTowelHiringPackages;
                    _towelHiringPackages = newCollection;
                }
                return _towelHiringPackages;
            }
            set
            {
                if (!ReferenceEquals(_towelHiringPackages, value))
                {
                    var previousValue = _towelHiringPackages as FixupCollection<TowelHiringPackage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTowelHiringPackages;
                    }
                    _towelHiringPackages = value;
                    var newValue = value as FixupCollection<TowelHiringPackage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTowelHiringPackages;
                    }
                }
            }
        }
        private ICollection<TowelHiringPackage> _towelHiringPackages;
        
    
        [DataMember]
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
        
    
        [DataMember]
        public virtual ICollection<UserTarget> UserTargets
        {
            get
            {
                if (_userTargets == null)
                {
                    var newCollection = new FixupCollection<UserTarget>();
                    newCollection.CollectionChanged += FixupUserTargets;
                    _userTargets = newCollection;
                }
                return _userTargets;
            }
            set
            {
                if (!ReferenceEquals(_userTargets, value))
                {
                    var previousValue = _userTargets as FixupCollection<UserTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTargets;
                    }
                    _userTargets = value;
                    var newValue = value as FixupCollection<UserTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTargets;
                    }
                }
            }
        }
        private ICollection<UserTarget> _userTargets;
        
    
        [DataMember]
        public virtual ICollection<LeadAppointment> LeadAppointments
        {
            get
            {
                if (_leadAppointments == null)
                {
                    var newCollection = new FixupCollection<LeadAppointment>();
                    newCollection.CollectionChanged += FixupLeadAppointments;
                    _leadAppointments = newCollection;
                }
                return _leadAppointments;
            }
            set
            {
                if (!ReferenceEquals(_leadAppointments, value))
                {
                    var previousValue = _leadAppointments as FixupCollection<LeadAppointment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadAppointments;
                    }
                    _leadAppointments = value;
                    var newValue = value as FixupCollection<LeadAppointment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadAppointments;
                    }
                }
            }
        }
        private ICollection<LeadAppointment> _leadAppointments;
        
    
        [DataMember]
        public virtual ICollection<LeadTransaction> LeadTransactions
        {
            get
            {
                if (_leadTransactions == null)
                {
                    var newCollection = new FixupCollection<LeadTransaction>();
                    newCollection.CollectionChanged += FixupLeadTransactions;
                    _leadTransactions = newCollection;
                }
                return _leadTransactions;
            }
            set
            {
                if (!ReferenceEquals(_leadTransactions, value))
                {
                    var previousValue = _leadTransactions as FixupCollection<LeadTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadTransactions;
                    }
                    _leadTransactions = value;
                    var newValue = value as FixupCollection<LeadTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadTransactions;
                    }
                }
            }
        }
        private ICollection<LeadTransaction> _leadTransactions;

        #endregion

        #region Association Fixup
    
        private void FixupAccessMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessMaster item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupComplainManagements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ComplainManagement item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ComplainManagement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupDepartmentMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepartmentMaster item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepartmentMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupDisclaimers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Disclaimer item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Disclaimer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupGroupMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GroupMaster item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupLeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lead item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lead item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupMemberships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Membership item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupPackageMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PackageMaster item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PackageMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupPTPPackageMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PTPPackageMaster item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PTPPackageMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupTowelHiringPackages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TowelHiringPackage item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TowelHiringPackage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupUserTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTarget item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupLeadAppointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadAppointment item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadAppointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }
    
        private void FixupLeadTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadTransaction item in e.NewItems)
                {
                    item.Club = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Club, this))
                    {
                        item.Club = null;
                    }
                }
            }
        }

        #endregion

    }
}
