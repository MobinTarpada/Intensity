//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Club))]
    [KnownType(typeof(Lead))]
    [KnownType(typeof(LeadStatusMaster))]
    public partial class LeadTransaction
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> leadId
        {
            get { return _leadId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadId != value)
                    {
                        if (Lead != null && Lead.ID != value)
                        {
                            Lead = null;
                        }
                        _leadId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _leadId;
        [DataMember]
        public virtual Nullable<long> clubId
        {
            get { return _clubId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clubId != value)
                    {
                        if (Club != null && Club.ID != value)
                        {
                            Club = null;
                        }
                        _clubId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _clubId;
        [DataMember]
        public virtual Nullable<long> currantLeadStatusId
        {
            get { return _currantLeadStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_currantLeadStatusId != value)
                    {
                        if (LeadStatusMaster1 != null && LeadStatusMaster1.ID != value)
                        {
                            LeadStatusMaster1 = null;
                        }
                        _currantLeadStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _currantLeadStatusId;
        [DataMember]
        public virtual Nullable<long> prevLeadStatusId
        {
            get { return _prevLeadStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_prevLeadStatusId != value)
                    {
                        if (LeadStatusMaster != null && LeadStatusMaster.ID != value)
                        {
                            LeadStatusMaster = null;
                        }
                        _prevLeadStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _prevLeadStatusId;
        [DataMember]
        public virtual string Remarks
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual Lead Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private Lead _lead;
        
    
        [DataMember]
        public virtual LeadStatusMaster LeadStatusMaster
        {
            get { return _leadStatusMaster; }
            set
            {
                if (!ReferenceEquals(_leadStatusMaster, value))
                {
                    var previousValue = _leadStatusMaster;
                    _leadStatusMaster = value;
                    FixupLeadStatusMaster(previousValue);
                }
            }
        }
        private LeadStatusMaster _leadStatusMaster;
        
    
        [DataMember]
        public virtual LeadStatusMaster LeadStatusMaster1
        {
            get { return _leadStatusMaster1; }
            set
            {
                if (!ReferenceEquals(_leadStatusMaster1, value))
                {
                    var previousValue = _leadStatusMaster1;
                    _leadStatusMaster1 = value;
                    FixupLeadStatusMaster1(previousValue);
                }
            }
        }
        private LeadStatusMaster _leadStatusMaster1;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.LeadTransactions.Contains(this))
            {
                previousValue.LeadTransactions.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.LeadTransactions.Contains(this))
                {
                    Club.LeadTransactions.Add(this);
                }
                if (clubId != Club.ID)
                {
                    clubId = Club.ID;
                }
            }
            else if (!_settingFK)
            {
                clubId = null;
            }
        }
    
        private void FixupLead(Lead previousValue)
        {
            if (previousValue != null && previousValue.LeadTransactions.Contains(this))
            {
                previousValue.LeadTransactions.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.LeadTransactions.Contains(this))
                {
                    Lead.LeadTransactions.Add(this);
                }
                if (leadId != Lead.ID)
                {
                    leadId = Lead.ID;
                }
            }
            else if (!_settingFK)
            {
                leadId = null;
            }
        }
    
        private void FixupLeadStatusMaster(LeadStatusMaster previousValue)
        {
            if (previousValue != null && previousValue.LeadTransactions.Contains(this))
            {
                previousValue.LeadTransactions.Remove(this);
            }
    
            if (LeadStatusMaster != null)
            {
                if (!LeadStatusMaster.LeadTransactions.Contains(this))
                {
                    LeadStatusMaster.LeadTransactions.Add(this);
                }
                if (prevLeadStatusId != LeadStatusMaster.ID)
                {
                    prevLeadStatusId = LeadStatusMaster.ID;
                }
            }
            else if (!_settingFK)
            {
                prevLeadStatusId = null;
            }
        }
    
        private void FixupLeadStatusMaster1(LeadStatusMaster previousValue)
        {
            if (previousValue != null && previousValue.LeadTransactions1.Contains(this))
            {
                previousValue.LeadTransactions1.Remove(this);
            }
    
            if (LeadStatusMaster1 != null)
            {
                if (!LeadStatusMaster1.LeadTransactions1.Contains(this))
                {
                    LeadStatusMaster1.LeadTransactions1.Add(this);
                }
                if (currantLeadStatusId != LeadStatusMaster1.ID)
                {
                    currantLeadStatusId = LeadStatusMaster1.ID;
                }
            }
            else if (!_settingFK)
            {
                currantLeadStatusId = null;
            }
        }

        #endregion

    }
}
