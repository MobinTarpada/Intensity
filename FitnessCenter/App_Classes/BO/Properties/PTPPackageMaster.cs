//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Club))]
    [KnownType(typeof(PTPMemberMaster))]
    public partial class PTPPackageMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string packageName
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal fees
        {
            get;
            set;
        }
        [DataMember]
        public virtual long validDays
        {
            get;
            set;
        }
        [DataMember]
        public virtual long noOfSessions
        {
            get;
            set;
        }
        [DataMember]
        public virtual long clubId
        {
            get { return _clubId; }
            set
            {
                if (_clubId != value)
                {
                    if (Club != null && Club.ID != value)
                    {
                        Club = null;
                    }
                    _clubId = value;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDelete
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<PTPMemberMaster> PTPMemberMasters
        {
            get
            {
                if (_pTPMemberMasters == null)
                {
                    var newCollection = new FixupCollection<PTPMemberMaster>();
                    newCollection.CollectionChanged += FixupPTPMemberMasters;
                    _pTPMemberMasters = newCollection;
                }
                return _pTPMemberMasters;
            }
            set
            {
                if (!ReferenceEquals(_pTPMemberMasters, value))
                {
                    var previousValue = _pTPMemberMasters as FixupCollection<PTPMemberMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPTPMemberMasters;
                    }
                    _pTPMemberMasters = value;
                    var newValue = value as FixupCollection<PTPMemberMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPTPMemberMasters;
                    }
                }
            }
        }
        private ICollection<PTPMemberMaster> _pTPMemberMasters;

        #endregion

        #region Association Fixup
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.PTPPackageMasters.Contains(this))
            {
                previousValue.PTPPackageMasters.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.PTPPackageMasters.Contains(this))
                {
                    Club.PTPPackageMasters.Add(this);
                }
                if (clubId != Club.ID)
                {
                    clubId = Club.ID;
                }
            }
        }
    
        private void FixupPTPMemberMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PTPMemberMaster item in e.NewItems)
                {
                    item.PTPPackageMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PTPMemberMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.PTPPackageMaster, this))
                    {
                        item.PTPPackageMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
