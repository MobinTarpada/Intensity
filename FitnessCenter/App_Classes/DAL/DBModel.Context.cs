//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using FitnessCenter.BO;

namespace FitnessCenter.DAL
{
    public partial class FitnessCenterEntities : ObjectContext
    {
        public const string ConnectionString = "name=FitnessCenterEntities";
        public const string ContainerName = "FitnessCenterEntities";
    
        #region Constructors
    
        public FitnessCenterEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
    		this.ContextOptions.ProxyCreationEnabled = true;//Changed by : Mehul Pandya
        }
    
        public FitnessCenterEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
    		this.ContextOptions.ProxyCreationEnabled = true;//Changed by : Mehul Pandya
        }
    
        public FitnessCenterEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
    		this.ContextOptions.ProxyCreationEnabled = true;//Changed by : Mehul Pandya
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<AboutU> AboutUs
        {
            get { return _aboutUs  ?? (_aboutUs = CreateObjectSet<AboutU>("AboutUs")); }
        }
        private ObjectSet<AboutU> _aboutUs;
    
        public ObjectSet<AccessManagement> AccessManagements
        {
            get { return _accessManagements  ?? (_accessManagements = CreateObjectSet<AccessManagement>("AccessManagements")); }
        }
        private ObjectSet<AccessManagement> _accessManagements;
    
        public ObjectSet<AccessMaster> AccessMasters
        {
            get { return _accessMasters  ?? (_accessMasters = CreateObjectSet<AccessMaster>("AccessMasters")); }
        }
        private ObjectSet<AccessMaster> _accessMasters;
    
        public ObjectSet<AttendenceManagement> AttendenceManagements
        {
            get { return _attendenceManagements  ?? (_attendenceManagements = CreateObjectSet<AttendenceManagement>("AttendenceManagements")); }
        }
        private ObjectSet<AttendenceManagement> _attendenceManagements;
    
        public ObjectSet<CancellationMaster> CancellationMasters
        {
            get { return _cancellationMasters  ?? (_cancellationMasters = CreateObjectSet<CancellationMaster>("CancellationMasters")); }
        }
        private ObjectSet<CancellationMaster> _cancellationMasters;
    
        public ObjectSet<CancellationTransaction> CancellationTransactions
        {
            get { return _cancellationTransactions  ?? (_cancellationTransactions = CreateObjectSet<CancellationTransaction>("CancellationTransactions")); }
        }
        private ObjectSet<CancellationTransaction> _cancellationTransactions;
    
        public ObjectSet<CardTypeMaster> CardTypeMasters
        {
            get { return _cardTypeMasters  ?? (_cardTypeMasters = CreateObjectSet<CardTypeMaster>("CardTypeMasters")); }
        }
        private ObjectSet<CardTypeMaster> _cardTypeMasters;
    
        public ObjectSet<Career> Careers
        {
            get { return _careers  ?? (_careers = CreateObjectSet<Career>("Careers")); }
        }
        private ObjectSet<Career> _careers;
    
        public ObjectSet<Club> Clubs
        {
            get { return _clubs  ?? (_clubs = CreateObjectSet<Club>("Clubs")); }
        }
        private ObjectSet<Club> _clubs;
    
        public ObjectSet<ComplainManagement> ComplainManagements
        {
            get { return _complainManagements  ?? (_complainManagements = CreateObjectSet<ComplainManagement>("ComplainManagements")); }
        }
        private ObjectSet<ComplainManagement> _complainManagements;
    
        public ObjectSet<DepartmentMaster> DepartmentMasters
        {
            get { return _departmentMasters  ?? (_departmentMasters = CreateObjectSet<DepartmentMaster>("DepartmentMasters")); }
        }
        private ObjectSet<DepartmentMaster> _departmentMasters;
    
        public ObjectSet<Disclaimer> Disclaimers
        {
            get { return _disclaimers  ?? (_disclaimers = CreateObjectSet<Disclaimer>("Disclaimers")); }
        }
        private ObjectSet<Disclaimer> _disclaimers;
    
        public ObjectSet<DisclaimerQuestionAnswer> DisclaimerQuestionAnswers
        {
            get { return _disclaimerQuestionAnswers  ?? (_disclaimerQuestionAnswers = CreateObjectSet<DisclaimerQuestionAnswer>("DisclaimerQuestionAnswers")); }
        }
        private ObjectSet<DisclaimerQuestionAnswer> _disclaimerQuestionAnswers;
    
        public ObjectSet<DisclaimerQuestionOption> DisclaimerQuestionOptions
        {
            get { return _disclaimerQuestionOptions  ?? (_disclaimerQuestionOptions = CreateObjectSet<DisclaimerQuestionOption>("DisclaimerQuestionOptions")); }
        }
        private ObjectSet<DisclaimerQuestionOption> _disclaimerQuestionOptions;
    
        public ObjectSet<DisclaimerQuestionsMaster> DisclaimerQuestionsMasters
        {
            get { return _disclaimerQuestionsMasters  ?? (_disclaimerQuestionsMasters = CreateObjectSet<DisclaimerQuestionsMaster>("DisclaimerQuestionsMasters")); }
        }
        private ObjectSet<DisclaimerQuestionsMaster> _disclaimerQuestionsMasters;
    
        public ObjectSet<DowngradeTransaction> DowngradeTransactions
        {
            get { return _downgradeTransactions  ?? (_downgradeTransactions = CreateObjectSet<DowngradeTransaction>("DowngradeTransactions")); }
        }
        private ObjectSet<DowngradeTransaction> _downgradeTransactions;
    
        public ObjectSet<DuePaymentHistory> DuePaymentHistories
        {
            get { return _duePaymentHistories  ?? (_duePaymentHistories = CreateObjectSet<DuePaymentHistory>("DuePaymentHistories")); }
        }
        private ObjectSet<DuePaymentHistory> _duePaymentHistories;
    
        public ObjectSet<EmployeeMaster> EmployeeMasters
        {
            get { return _employeeMasters  ?? (_employeeMasters = CreateObjectSet<EmployeeMaster>("EmployeeMasters")); }
        }
        private ObjectSet<EmployeeMaster> _employeeMasters;
    
        public ObjectSet<ExerciseMaster> ExerciseMasters
        {
            get { return _exerciseMasters  ?? (_exerciseMasters = CreateObjectSet<ExerciseMaster>("ExerciseMasters")); }
        }
        private ObjectSet<ExerciseMaster> _exerciseMasters;
    
        public ObjectSet<ExrciseCardLevelSet> ExrciseCardLevelSets
        {
            get { return _exrciseCardLevelSets  ?? (_exrciseCardLevelSets = CreateObjectSet<ExrciseCardLevelSet>("ExrciseCardLevelSets")); }
        }
        private ObjectSet<ExrciseCardLevelSet> _exrciseCardLevelSets;
    
        public ObjectSet<Facility> Facilities
        {
            get { return _facilities  ?? (_facilities = CreateObjectSet<Facility>("Facilities")); }
        }
        private ObjectSet<Facility> _facilities;
    
        public ObjectSet<FreeTrial> FreeTrials
        {
            get { return _freeTrials  ?? (_freeTrials = CreateObjectSet<FreeTrial>("FreeTrials")); }
        }
        private ObjectSet<FreeTrial> _freeTrials;
    
        public ObjectSet<GroupMaster> GroupMasters
        {
            get { return _groupMasters  ?? (_groupMasters = CreateObjectSet<GroupMaster>("GroupMasters")); }
        }
        private ObjectSet<GroupMaster> _groupMasters;
    
        public ObjectSet<HomepageSlider> HomepageSliders
        {
            get { return _homepageSliders  ?? (_homepageSliders = CreateObjectSet<HomepageSlider>("HomepageSliders")); }
        }
        private ObjectSet<HomepageSlider> _homepageSliders;
    
        public ObjectSet<ItemMaster> ItemMasters
        {
            get { return _itemMasters  ?? (_itemMasters = CreateObjectSet<ItemMaster>("ItemMasters")); }
        }
        private ObjectSet<ItemMaster> _itemMasters;
    
        public ObjectSet<LeadQuestionOption> LeadQuestionOptions
        {
            get { return _leadQuestionOptions  ?? (_leadQuestionOptions = CreateObjectSet<LeadQuestionOption>("LeadQuestionOptions")); }
        }
        private ObjectSet<LeadQuestionOption> _leadQuestionOptions;
    
        public ObjectSet<LeadQuestionsMaster> LeadQuestionsMasters
        {
            get { return _leadQuestionsMasters  ?? (_leadQuestionsMasters = CreateObjectSet<LeadQuestionsMaster>("LeadQuestionsMasters")); }
        }
        private ObjectSet<LeadQuestionsMaster> _leadQuestionsMasters;
    
        public ObjectSet<Lead> Leads
        {
            get { return _leads  ?? (_leads = CreateObjectSet<Lead>("Leads")); }
        }
        private ObjectSet<Lead> _leads;
    
        public ObjectSet<LeadStatusMaster> LeadStatusMasters
        {
            get { return _leadStatusMasters  ?? (_leadStatusMasters = CreateObjectSet<LeadStatusMaster>("LeadStatusMasters")); }
        }
        private ObjectSet<LeadStatusMaster> _leadStatusMasters;
    
        public ObjectSet<LeadTypeMaster> LeadTypeMasters
        {
            get { return _leadTypeMasters  ?? (_leadTypeMasters = CreateObjectSet<LeadTypeMaster>("LeadTypeMasters")); }
        }
        private ObjectSet<LeadTypeMaster> _leadTypeMasters;
    
        public ObjectSet<MeasurementMaster> MeasurementMasters
        {
            get { return _measurementMasters  ?? (_measurementMasters = CreateObjectSet<MeasurementMaster>("MeasurementMasters")); }
        }
        private ObjectSet<MeasurementMaster> _measurementMasters;
    
        public ObjectSet<MedicalQuestion> MedicalQuestions
        {
            get { return _medicalQuestions  ?? (_medicalQuestions = CreateObjectSet<MedicalQuestion>("MedicalQuestions")); }
        }
        private ObjectSet<MedicalQuestion> _medicalQuestions;
    
        public ObjectSet<MemberItemSale> MemberItemSales
        {
            get { return _memberItemSales  ?? (_memberItemSales = CreateObjectSet<MemberItemSale>("MemberItemSales")); }
        }
        private ObjectSet<MemberItemSale> _memberItemSales;
    
        public ObjectSet<MemberItemTotalSale> MemberItemTotalSales
        {
            get { return _memberItemTotalSales  ?? (_memberItemTotalSales = CreateObjectSet<MemberItemTotalSale>("MemberItemTotalSales")); }
        }
        private ObjectSet<MemberItemTotalSale> _memberItemTotalSales;
    
        public ObjectSet<MemberJuiceMaster> MemberJuiceMasters
        {
            get { return _memberJuiceMasters  ?? (_memberJuiceMasters = CreateObjectSet<MemberJuiceMaster>("MemberJuiceMasters")); }
        }
        private ObjectSet<MemberJuiceMaster> _memberJuiceMasters;
    
        public ObjectSet<MemberJuiceTransaction> MemberJuiceTransactions
        {
            get { return _memberJuiceTransactions  ?? (_memberJuiceTransactions = CreateObjectSet<MemberJuiceTransaction>("MemberJuiceTransactions")); }
        }
        private ObjectSet<MemberJuiceTransaction> _memberJuiceTransactions;
    
        public ObjectSet<Membership> Memberships
        {
            get { return _memberships  ?? (_memberships = CreateObjectSet<Membership>("Memberships")); }
        }
        private ObjectSet<Membership> _memberships;
    
        public ObjectSet<MembershipStatu> MembershipStatus
        {
            get { return _membershipStatus  ?? (_membershipStatus = CreateObjectSet<MembershipStatu>("MembershipStatus")); }
        }
        private ObjectSet<MembershipStatu> _membershipStatus;
    
        public ObjectSet<MembershipTransaction> MembershipTransactions
        {
            get { return _membershipTransactions  ?? (_membershipTransactions = CreateObjectSet<MembershipTransaction>("MembershipTransactions")); }
        }
        private ObjectSet<MembershipTransaction> _membershipTransactions;
    
        public ObjectSet<Module> Modules
        {
            get { return _modules  ?? (_modules = CreateObjectSet<Module>("Modules")); }
        }
        private ObjectSet<Module> _modules;
    
        public ObjectSet<PackageMaster> PackageMasters
        {
            get { return _packageMasters  ?? (_packageMasters = CreateObjectSet<PackageMaster>("PackageMasters")); }
        }
        private ObjectSet<PackageMaster> _packageMasters;
    
        public ObjectSet<PageMaster> PageMasters
        {
            get { return _pageMasters  ?? (_pageMasters = CreateObjectSet<PageMaster>("PageMasters")); }
        }
        private ObjectSet<PageMaster> _pageMasters;
    
        public ObjectSet<Payment> Payments
        {
            get { return _payments  ?? (_payments = CreateObjectSet<Payment>("Payments")); }
        }
        private ObjectSet<Payment> _payments;
    
        public ObjectSet<PayMode> PayModes
        {
            get { return _payModes  ?? (_payModes = CreateObjectSet<PayMode>("PayModes")); }
        }
        private ObjectSet<PayMode> _payModes;
    
        public ObjectSet<PTPMemberMaster> PTPMemberMasters
        {
            get { return _pTPMemberMasters  ?? (_pTPMemberMasters = CreateObjectSet<PTPMemberMaster>("PTPMemberMasters")); }
        }
        private ObjectSet<PTPMemberMaster> _pTPMemberMasters;
    
        public ObjectSet<PTPMemberTransaction> PTPMemberTransactions
        {
            get { return _pTPMemberTransactions  ?? (_pTPMemberTransactions = CreateObjectSet<PTPMemberTransaction>("PTPMemberTransactions")); }
        }
        private ObjectSet<PTPMemberTransaction> _pTPMemberTransactions;
    
        public ObjectSet<PTPPackageMaster> PTPPackageMasters
        {
            get { return _pTPPackageMasters  ?? (_pTPPackageMasters = CreateObjectSet<PTPPackageMaster>("PTPPackageMasters")); }
        }
        private ObjectSet<PTPPackageMaster> _pTPPackageMasters;
    
        public ObjectSet<SchemeMaster> SchemeMasters
        {
            get { return _schemeMasters  ?? (_schemeMasters = CreateObjectSet<SchemeMaster>("SchemeMasters")); }
        }
        private ObjectSet<SchemeMaster> _schemeMasters;
    
        public ObjectSet<TimeTransaction> TimeTransactions
        {
            get { return _timeTransactions  ?? (_timeTransactions = CreateObjectSet<TimeTransaction>("TimeTransactions")); }
        }
        private ObjectSet<TimeTransaction> _timeTransactions;
    
        public ObjectSet<TowelHiringMaster> TowelHiringMasters
        {
            get { return _towelHiringMasters  ?? (_towelHiringMasters = CreateObjectSet<TowelHiringMaster>("TowelHiringMasters")); }
        }
        private ObjectSet<TowelHiringMaster> _towelHiringMasters;
    
        public ObjectSet<TowelHiringPackage> TowelHiringPackages
        {
            get { return _towelHiringPackages  ?? (_towelHiringPackages = CreateObjectSet<TowelHiringPackage>("TowelHiringPackages")); }
        }
        private ObjectSet<TowelHiringPackage> _towelHiringPackages;
    
        public ObjectSet<TowelTransaction> TowelTransactions
        {
            get { return _towelTransactions  ?? (_towelTransactions = CreateObjectSet<TowelTransaction>("TowelTransactions")); }
        }
        private ObjectSet<TowelTransaction> _towelTransactions;
    
        public ObjectSet<UpgradeTransaction> UpgradeTransactions
        {
            get { return _upgradeTransactions  ?? (_upgradeTransactions = CreateObjectSet<UpgradeTransaction>("UpgradeTransactions")); }
        }
        private ObjectSet<UpgradeTransaction> _upgradeTransactions;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<UserSchemeTransaction> UserSchemeTransactions
        {
            get { return _userSchemeTransactions  ?? (_userSchemeTransactions = CreateObjectSet<UserSchemeTransaction>("UserSchemeTransactions")); }
        }
        private ObjectSet<UserSchemeTransaction> _userSchemeTransactions;
    
        public ObjectSet<UserTarget> UserTargets
        {
            get { return _userTargets  ?? (_userTargets = CreateObjectSet<UserTarget>("UserTargets")); }
        }
        private ObjectSet<UserTarget> _userTargets;
    
        public ObjectSet<UserTypeMaster> UserTypeMasters
        {
            get { return _userTypeMasters  ?? (_userTypeMasters = CreateObjectSet<UserTypeMaster>("UserTypeMasters")); }
        }
        private ObjectSet<UserTypeMaster> _userTypeMasters;
    
        public ObjectSet<VirtualVideo> VirtualVideos
        {
            get { return _virtualVideos  ?? (_virtualVideos = CreateObjectSet<VirtualVideo>("VirtualVideos")); }
        }
        private ObjectSet<VirtualVideo> _virtualVideos;
    
        public ObjectSet<AssignExercise> AssignExercises
        {
            get { return _assignExercises  ?? (_assignExercises = CreateObjectSet<AssignExercise>("AssignExercises")); }
        }
        private ObjectSet<AssignExercise> _assignExercises;
    
        public ObjectSet<ExerciseCardMaster> ExerciseCardMasters
        {
            get { return _exerciseCardMasters  ?? (_exerciseCardMasters = CreateObjectSet<ExerciseCardMaster>("ExerciseCardMasters")); }
        }
        private ObjectSet<ExerciseCardMaster> _exerciseCardMasters;
    
        public ObjectSet<LeadQuestionAnswer> LeadQuestionAnswers
        {
            get { return _leadQuestionAnswers  ?? (_leadQuestionAnswers = CreateObjectSet<LeadQuestionAnswer>("LeadQuestionAnswers")); }
        }
        private ObjectSet<LeadQuestionAnswer> _leadQuestionAnswers;
    
        public ObjectSet<LeadAppointment> LeadAppointments
        {
            get { return _leadAppointments  ?? (_leadAppointments = CreateObjectSet<LeadAppointment>("LeadAppointments")); }
        }
        private ObjectSet<LeadAppointment> _leadAppointments;
    
        public ObjectSet<LeadFollowup> LeadFollowups
        {
            get { return _leadFollowups  ?? (_leadFollowups = CreateObjectSet<LeadFollowup>("LeadFollowups")); }
        }
        private ObjectSet<LeadFollowup> _leadFollowups;
    
        public ObjectSet<LeadPresentation> LeadPresentations
        {
            get { return _leadPresentations  ?? (_leadPresentations = CreateObjectSet<LeadPresentation>("LeadPresentations")); }
        }
        private ObjectSet<LeadPresentation> _leadPresentations;
    
        public ObjectSet<LeadTransaction> LeadTransactions
        {
            get { return _leadTransactions  ?? (_leadTransactions = CreateObjectSet<LeadTransaction>("LeadTransactions")); }
        }
        private ObjectSet<LeadTransaction> _leadTransactions;

        #endregion

        #region Function Imports
        public ObjectResult<GetPagePermissions_Result> GetPagePermissions(Nullable<long> uSERID)
        {
    
            ObjectParameter uSERIDParameter;
    
            if (uSERID.HasValue)
            {
                uSERIDParameter = new ObjectParameter("USERID", uSERID);
            }
            else
            {
                uSERIDParameter = new ObjectParameter("USERID", typeof(long));
            }
            return base.ExecuteFunction<GetPagePermissions_Result>("GetPagePermissions", uSERIDParameter);
        }
        public ObjectResult<GetUserTargetsByUserId_Result> GetUserTargetsByUserId(Nullable<long> userid)
        {
    
            ObjectParameter useridParameter;
    
            if (userid.HasValue)
            {
                useridParameter = new ObjectParameter("userid", userid);
            }
            else
            {
                useridParameter = new ObjectParameter("userid", typeof(long));
            }
            return base.ExecuteFunction<GetUserTargetsByUserId_Result>("GetUserTargetsByUserId", useridParameter);
        }
        public ObjectResult<UserTarget> GetUserTargetByDateAndLeadType(Nullable<long> lEADTYPEID, Nullable<long> uSERID, string fROMDATE, string tODATE)
        {
    
            ObjectParameter lEADTYPEIDParameter;
    
            if (lEADTYPEID.HasValue)
            {
                lEADTYPEIDParameter = new ObjectParameter("LEADTYPEID", lEADTYPEID);
            }
            else
            {
                lEADTYPEIDParameter = new ObjectParameter("LEADTYPEID", typeof(long));
            }
    
            ObjectParameter uSERIDParameter;
    
            if (uSERID.HasValue)
            {
                uSERIDParameter = new ObjectParameter("USERID", uSERID);
            }
            else
            {
                uSERIDParameter = new ObjectParameter("USERID", typeof(long));
            }
    
            ObjectParameter fROMDATEParameter;
    
            if (fROMDATE != null)
            {
                fROMDATEParameter = new ObjectParameter("FROMDATE", fROMDATE);
            }
            else
            {
                fROMDATEParameter = new ObjectParameter("FROMDATE", typeof(string));
            }
    
            ObjectParameter tODATEParameter;
    
            if (tODATE != null)
            {
                tODATEParameter = new ObjectParameter("TODATE", tODATE);
            }
            else
            {
                tODATEParameter = new ObjectParameter("TODATE", typeof(string));
            }
            return base.ExecuteFunction<UserTarget>("GetUserTargetByDateAndLeadType", lEADTYPEIDParameter, uSERIDParameter, fROMDATEParameter, tODATEParameter);
        }
        public ObjectResult<GetAchievedTargetByUserAndLeadtype_Result> GetAchievedTargetByUserAndLeadtype(Nullable<int> uSERID, Nullable<int> lEADTYPEID)
        {
    
            ObjectParameter uSERIDParameter;
    
            if (uSERID.HasValue)
            {
                uSERIDParameter = new ObjectParameter("USERID", uSERID);
            }
            else
            {
                uSERIDParameter = new ObjectParameter("USERID", typeof(int));
            }
    
            ObjectParameter lEADTYPEIDParameter;
    
            if (lEADTYPEID.HasValue)
            {
                lEADTYPEIDParameter = new ObjectParameter("LEADTYPEID", lEADTYPEID);
            }
            else
            {
                lEADTYPEIDParameter = new ObjectParameter("LEADTYPEID", typeof(int));
            }
            return base.ExecuteFunction<GetAchievedTargetByUserAndLeadtype_Result>("GetAchievedTargetByUserAndLeadtype", uSERIDParameter, lEADTYPEIDParameter);
        }
        public ObjectResult<GetAssignExerciseByMemberId_Result> GetAssignExerciseByMemberId(Nullable<long> memberId)
        {
    
            ObjectParameter memberIdParameter;
    
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("MemberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("MemberId", typeof(long));
            }
            return base.ExecuteFunction<GetAssignExerciseByMemberId_Result>("GetAssignExerciseByMemberId", memberIdParameter);
        }
        public ObjectResult<GetAssignedTransaction_Result> GetAssignedTransaction(Nullable<long> pTPMEMBERID)
        {
    
            ObjectParameter pTPMEMBERIDParameter;
    
            if (pTPMEMBERID.HasValue)
            {
                pTPMEMBERIDParameter = new ObjectParameter("PTPMEMBERID", pTPMEMBERID);
            }
            else
            {
                pTPMEMBERIDParameter = new ObjectParameter("PTPMEMBERID", typeof(long));
            }
            return base.ExecuteFunction<GetAssignedTransaction_Result>("GetAssignedTransaction", pTPMEMBERIDParameter);
        }
        public ObjectResult<GetClubs_Result> GetClubs(string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<GetClubs_Result>("GetClubs", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<GetMembers_Result> GetMembers(Nullable<long> cLUBID, string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<GetMembers_Result>("GetMembers", cLUBIDParameter, sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<PTPPackageMaster> GetPTPPackages(string pACKAGENAME, string sORTFIELD, string sORTDIR, Nullable<long> cLUBID)
        {
    
            ObjectParameter pACKAGENAMEParameter;
    
            if (pACKAGENAME != null)
            {
                pACKAGENAMEParameter = new ObjectParameter("PACKAGENAME", pACKAGENAME);
            }
            else
            {
                pACKAGENAMEParameter = new ObjectParameter("PACKAGENAME", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<PTPPackageMaster>("GetPTPPackages", pACKAGENAMEParameter, sORTFIELDParameter, sORTDIRParameter, cLUBIDParameter);
        }
        public ObjectResult<GetAssignedPTP_Result> GetAssignedPTP(string fULLNAME, string rFIDNO, string mEMBERSHIPNO, string sORTDIR, string sORTFIELD, Nullable<long> cLUBID)
        {
    
            ObjectParameter fULLNAMEParameter;
    
            if (fULLNAME != null)
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", fULLNAME);
            }
            else
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", typeof(string));
            }
    
            ObjectParameter rFIDNOParameter;
    
            if (rFIDNO != null)
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", rFIDNO);
            }
            else
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", typeof(string));
            }
    
            ObjectParameter mEMBERSHIPNOParameter;
    
            if (mEMBERSHIPNO != null)
            {
                mEMBERSHIPNOParameter = new ObjectParameter("MEMBERSHIPNO", mEMBERSHIPNO);
            }
            else
            {
                mEMBERSHIPNOParameter = new ObjectParameter("MEMBERSHIPNO", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetAssignedPTP_Result>("GetAssignedPTP", fULLNAMEParameter, rFIDNOParameter, mEMBERSHIPNOParameter, sORTDIRParameter, sORTFIELDParameter, cLUBIDParameter);
        }
        public ObjectResult<GroupMaster> GetGroups(string nAME, string cODE, string sORTDIR, string sORTFIELD)
        {
    
            ObjectParameter nAMEParameter;
    
            if (nAME != null)
            {
                nAMEParameter = new ObjectParameter("NAME", nAME);
            }
            else
            {
                nAMEParameter = new ObjectParameter("NAME", typeof(string));
            }
    
            ObjectParameter cODEParameter;
    
            if (cODE != null)
            {
                cODEParameter = new ObjectParameter("CODE", cODE);
            }
            else
            {
                cODEParameter = new ObjectParameter("CODE", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
            return base.ExecuteFunction<GroupMaster>("GetGroups", nAMEParameter, cODEParameter, sORTDIRParameter, sORTFIELDParameter);
        }
        public ObjectResult<GetAssignedTowel_Result> GetAssignedTowel(string sORTDIR, string sORTFIELD, string rFIDNO, string fULLNAME, Nullable<long> cLUBID)
        {
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter rFIDNOParameter;
    
            if (rFIDNO != null)
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", rFIDNO);
            }
            else
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", typeof(string));
            }
    
            ObjectParameter fULLNAMEParameter;
    
            if (fULLNAME != null)
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", fULLNAME);
            }
            else
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetAssignedTowel_Result>("GetAssignedTowel", sORTDIRParameter, sORTFIELDParameter, rFIDNOParameter, fULLNAMEParameter, cLUBIDParameter);
        }
        public ObjectResult<TowelHiringPackage> GetTowelPackage(string sORTDIR, string sORTFIELD, string pACKAGENAME, Nullable<long> cLUBID)
        {
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter pACKAGENAMEParameter;
    
            if (pACKAGENAME != null)
            {
                pACKAGENAMEParameter = new ObjectParameter("PACKAGENAME", pACKAGENAME);
            }
            else
            {
                pACKAGENAMEParameter = new ObjectParameter("PACKAGENAME", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<TowelHiringPackage>("GetTowelPackage", sORTDIRParameter, sORTFIELDParameter, pACKAGENAMEParameter, cLUBIDParameter);
        }
        public ObjectResult<GetProductSales_Result> GetProductSales(string sORTDIR, string sORTFIELD, string rFID, string mEMBERNAME, Nullable<long> cLUBID)
        {
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter rFIDParameter;
    
            if (rFID != null)
            {
                rFIDParameter = new ObjectParameter("RFID", rFID);
            }
            else
            {
                rFIDParameter = new ObjectParameter("RFID", typeof(string));
            }
    
            ObjectParameter mEMBERNAMEParameter;
    
            if (mEMBERNAME != null)
            {
                mEMBERNAMEParameter = new ObjectParameter("MEMBERNAME", mEMBERNAME);
            }
            else
            {
                mEMBERNAMEParameter = new ObjectParameter("MEMBERNAME", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetProductSales_Result>("GetProductSales", sORTDIRParameter, sORTFIELDParameter, rFIDParameter, mEMBERNAMEParameter, cLUBIDParameter);
        }
        public ObjectResult<GetJuiceTrans_Result> GetJuiceTrans(string sORTDIR, string sORTFIELD, string rFID, string mEMBERNAME)
        {
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter rFIDParameter;
    
            if (rFID != null)
            {
                rFIDParameter = new ObjectParameter("RFID", rFID);
            }
            else
            {
                rFIDParameter = new ObjectParameter("RFID", typeof(string));
            }
    
            ObjectParameter mEMBERNAMEParameter;
    
            if (mEMBERNAME != null)
            {
                mEMBERNAMEParameter = new ObjectParameter("MEMBERNAME", mEMBERNAME);
            }
            else
            {
                mEMBERNAMEParameter = new ObjectParameter("MEMBERNAME", typeof(string));
            }
            return base.ExecuteFunction<GetJuiceTrans_Result>("GetJuiceTrans", sORTDIRParameter, sORTFIELDParameter, rFIDParameter, mEMBERNAMEParameter);
        }
        public ObjectResult<GetExerciseMaster_Result> GetExerciseMaster(string sEARCHTEXT, string sORTFIELD, string sORTDIR, Nullable<long> cLUBID)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetExerciseMaster_Result>("GetExerciseMaster", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, cLUBIDParameter);
        }
        public ObjectResult<GetMembersFromAssignExercise_Result> GetMembersFromAssignExercise(string fULLNAME, Nullable<long> cLUBID)
        {
    
            ObjectParameter fULLNAMEParameter;
    
            if (fULLNAME != null)
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", fULLNAME);
            }
            else
            {
                fULLNAMEParameter = new ObjectParameter("FULLNAME", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetMembersFromAssignExercise_Result>("GetMembersFromAssignExercise", fULLNAMEParameter, cLUBIDParameter);
        }
        public ObjectResult<GetArobicExercise_Result> GetArobicExercise(Nullable<long> bodyType, Nullable<long> memberId, Nullable<long> cLUBID)
        {
    
            ObjectParameter bodyTypeParameter;
    
            if (bodyType.HasValue)
            {
                bodyTypeParameter = new ObjectParameter("BodyType", bodyType);
            }
            else
            {
                bodyTypeParameter = new ObjectParameter("BodyType", typeof(long));
            }
    
            ObjectParameter memberIdParameter;
    
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("MemberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("MemberId", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetArobicExercise_Result>("GetArobicExercise", bodyTypeParameter, memberIdParameter, cLUBIDParameter);
        }
        public ObjectResult<GetNonArobicExercise_Result> GetNonArobicExercise(Nullable<long> bodyType, Nullable<long> levelId, Nullable<long> mEMBERID, Nullable<long> cLUBID)
        {
    
            ObjectParameter bodyTypeParameter;
    
            if (bodyType.HasValue)
            {
                bodyTypeParameter = new ObjectParameter("BodyType", bodyType);
            }
            else
            {
                bodyTypeParameter = new ObjectParameter("BodyType", typeof(long));
            }
    
            ObjectParameter levelIdParameter;
    
            if (levelId.HasValue)
            {
                levelIdParameter = new ObjectParameter("LevelId", levelId);
            }
            else
            {
                levelIdParameter = new ObjectParameter("LevelId", typeof(long));
            }
    
            ObjectParameter mEMBERIDParameter;
    
            if (mEMBERID.HasValue)
            {
                mEMBERIDParameter = new ObjectParameter("MEMBERID", mEMBERID);
            }
            else
            {
                mEMBERIDParameter = new ObjectParameter("MEMBERID", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetNonArobicExercise_Result>("GetNonArobicExercise", bodyTypeParameter, levelIdParameter, mEMBERIDParameter, cLUBIDParameter);
        }
        public ObjectResult<GetLeadTargetHeaders_Result> GetLeadTargetHeaders(Nullable<long> cLUBID, Nullable<long> uSERTYPEID)
        {
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
    
            ObjectParameter uSERTYPEIDParameter;
    
            if (uSERTYPEID.HasValue)
            {
                uSERTYPEIDParameter = new ObjectParameter("USERTYPEID", uSERTYPEID);
            }
            else
            {
                uSERTYPEIDParameter = new ObjectParameter("USERTYPEID", typeof(long));
            }
            return base.ExecuteFunction<GetLeadTargetHeaders_Result>("GetLeadTargetHeaders", cLUBIDParameter, uSERTYPEIDParameter);
        }
        public ObjectResult<GetMembersByLeadID_Result> GetMembersByLeadID(Nullable<long> cLUBID)
        {
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetMembersByLeadID_Result>("GetMembersByLeadID", cLUBIDParameter);
        }
        public ObjectResult<GetDiscalimersEntry_Result> GetDiscalimersEntry(Nullable<long> cLUBID, Nullable<long> memberId, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
    
            ObjectParameter memberIdParameter;
    
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("MemberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("MemberId", typeof(long));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<GetDiscalimersEntry_Result>("GetDiscalimersEntry", cLUBIDParameter, memberIdParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<GetAgreementReceipt_Result> GetAgreementReceipt(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string agreementNo, string query)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter agreementNoParameter;
    
            if (agreementNo != null)
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", agreementNo);
            }
            else
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", typeof(string));
            }
    
            ObjectParameter queryParameter;
    
            if (query != null)
            {
                queryParameter = new ObjectParameter("Query", query);
            }
            else
            {
                queryParameter = new ObjectParameter("Query", typeof(string));
            }
            return base.ExecuteFunction<GetAgreementReceipt_Result>("GetAgreementReceipt", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, agreementNoParameter, queryParameter);
        }
        public ObjectResult<GetFreeTrial_Result> GetFreeTrial(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string contact)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter contactParameter;
    
            if (contact != null)
            {
                contactParameter = new ObjectParameter("Contact", contact);
            }
            else
            {
                contactParameter = new ObjectParameter("Contact", typeof(string));
            }
            return base.ExecuteFunction<GetFreeTrial_Result>("GetFreeTrial", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, contactParameter);
        }
        public ObjectResult<GetPaymentReciept_Result> GetPaymentReciept(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string agreementNo, string query)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter agreementNoParameter;
    
            if (agreementNo != null)
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", agreementNo);
            }
            else
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", typeof(string));
            }
    
            ObjectParameter queryParameter;
    
            if (query != null)
            {
                queryParameter = new ObjectParameter("Query", query);
            }
            else
            {
                queryParameter = new ObjectParameter("Query", typeof(string));
            }
            return base.ExecuteFunction<GetPaymentReciept_Result>("GetPaymentReciept", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, agreementNoParameter, queryParameter);
        }
        public ObjectResult<GetPaymentHistory_Result> GetPaymentHistory(string sEARCHTEXT, string agreementNo, Nullable<long> clubId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter agreementNoParameter;
    
            if (agreementNo != null)
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", agreementNo);
            }
            else
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", typeof(string));
            }
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
            return base.ExecuteFunction<GetPaymentHistory_Result>("GetPaymentHistory", sEARCHTEXTParameter, agreementNoParameter, clubIdParameter);
        }
        public ObjectResult<GetPartPayment_Result> GetPartPayment(string sEARCHTEXT, Nullable<long> clubId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
            return base.ExecuteFunction<GetPartPayment_Result>("GetPartPayment", sEARCHTEXTParameter, clubIdParameter);
        }
        public ObjectResult<GetFullPayment_Result> GetFullPayment(string sEARCHTEXT, Nullable<long> clubId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
            return base.ExecuteFunction<GetFullPayment_Result>("GetFullPayment", sEARCHTEXTParameter, clubIdParameter);
        }
        public ObjectResult<GetExpiredMembers_Result> GetExpiredMembers(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate, string gender, string address, string packageId, string schemeId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
    
            ObjectParameter genderParameter;
    
            if (gender != null)
            {
                genderParameter = new ObjectParameter("Gender", gender);
            }
            else
            {
                genderParameter = new ObjectParameter("Gender", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter packageIdParameter;
    
            if (packageId != null)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(string));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId != null)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(string));
            }
            return base.ExecuteFunction<GetExpiredMembers_Result>("GetExpiredMembers", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter, genderParameter, addressParameter, packageIdParameter, schemeIdParameter);
        }
        public ObjectResult<GetAbsentMembers_Result> GetAbsentMembers(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
            return base.ExecuteFunction<GetAbsentMembers_Result>("GetAbsentMembers", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<GetPresentMembers_Result> GetPresentMembers(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
            return base.ExecuteFunction<GetPresentMembers_Result>("GetPresentMembers", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<GetItems_Result> GetItems(string nAME, string cODE, string sORTDIR, string sORTFIELD, Nullable<long> cLUBID)
        {
    
            ObjectParameter nAMEParameter;
    
            if (nAME != null)
            {
                nAMEParameter = new ObjectParameter("NAME", nAME);
            }
            else
            {
                nAMEParameter = new ObjectParameter("NAME", typeof(string));
            }
    
            ObjectParameter cODEParameter;
    
            if (cODE != null)
            {
                cODEParameter = new ObjectParameter("CODE", cODE);
            }
            else
            {
                cODEParameter = new ObjectParameter("CODE", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetItems_Result>("GetItems", nAMEParameter, cODEParameter, sORTDIRParameter, sORTFIELDParameter, cLUBIDParameter);
        }
        public ObjectResult<GetAniversarryDayByDates_Result> GetAniversarryDayByDates(Nullable<long> clubID, string searchText, string fromDate, Nullable<long> userId)
        {
    
            ObjectParameter clubIDParameter;
    
            if (clubID.HasValue)
            {
                clubIDParameter = new ObjectParameter("ClubID", clubID);
            }
            else
            {
                clubIDParameter = new ObjectParameter("ClubID", typeof(long));
            }
    
            ObjectParameter searchTextParameter;
    
            if (searchText != null)
            {
                searchTextParameter = new ObjectParameter("SearchText", searchText);
            }
            else
            {
                searchTextParameter = new ObjectParameter("SearchText", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
            return base.ExecuteFunction<GetAniversarryDayByDates_Result>("GetAniversarryDayByDates", clubIDParameter, searchTextParameter, fromDateParameter, userIdParameter);
        }
        public ObjectResult<GetBirthDayByDates_Result> GetBirthDayByDates(Nullable<long> clubID, string searchText, string fromDate, Nullable<long> userId)
        {
    
            ObjectParameter clubIDParameter;
    
            if (clubID.HasValue)
            {
                clubIDParameter = new ObjectParameter("ClubID", clubID);
            }
            else
            {
                clubIDParameter = new ObjectParameter("ClubID", typeof(long));
            }
    
            ObjectParameter searchTextParameter;
    
            if (searchText != null)
            {
                searchTextParameter = new ObjectParameter("SearchText", searchText);
            }
            else
            {
                searchTextParameter = new ObjectParameter("SearchText", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
            return base.ExecuteFunction<GetBirthDayByDates_Result>("GetBirthDayByDates", clubIDParameter, searchTextParameter, fromDateParameter, userIdParameter);
        }
        public ObjectResult<GetLeadAppointmentByDates_Result> GetLeadAppointmentByDates(Nullable<long> clubID, string sEARCHTEXT, string fromDate, Nullable<long> userId)
        {
    
            ObjectParameter clubIDParameter;
    
            if (clubID.HasValue)
            {
                clubIDParameter = new ObjectParameter("ClubID", clubID);
            }
            else
            {
                clubIDParameter = new ObjectParameter("ClubID", typeof(long));
            }
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
            return base.ExecuteFunction<GetLeadAppointmentByDates_Result>("GetLeadAppointmentByDates", clubIDParameter, sEARCHTEXTParameter, fromDateParameter, userIdParameter);
        }
        public ObjectResult<GetLeadHistoryByDates_Result> GetLeadHistoryByDates(string searchText, string fromDate)
        {
    
            ObjectParameter searchTextParameter;
    
            if (searchText != null)
            {
                searchTextParameter = new ObjectParameter("SearchText", searchText);
            }
            else
            {
                searchTextParameter = new ObjectParameter("SearchText", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
            return base.ExecuteFunction<GetLeadHistoryByDates_Result>("GetLeadHistoryByDates", searchTextParameter, fromDateParameter);
        }
        public ObjectResult<GetLeadPresentationByDates_Result> GetLeadPresentationByDates(Nullable<long> clubID, string sEARCHTEXT, string fromDate)
        {
    
            ObjectParameter clubIDParameter;
    
            if (clubID.HasValue)
            {
                clubIDParameter = new ObjectParameter("ClubID", clubID);
            }
            else
            {
                clubIDParameter = new ObjectParameter("ClubID", typeof(long));
            }
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
            return base.ExecuteFunction<GetLeadPresentationByDates_Result>("GetLeadPresentationByDates", clubIDParameter, sEARCHTEXTParameter, fromDateParameter);
        }
        public ObjectResult<GetPackageandSchemeWiseReport_Result> GetPackageandSchemeWiseReport(Nullable<long> clubId, Nullable<long> packageId, Nullable<long> schemeid, string fromDate, string toDate)
        {
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter packageIdParameter;
    
            if (packageId.HasValue)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(long));
            }
    
            ObjectParameter schemeidParameter;
    
            if (schemeid.HasValue)
            {
                schemeidParameter = new ObjectParameter("schemeid", schemeid);
            }
            else
            {
                schemeidParameter = new ObjectParameter("schemeid", typeof(long));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
            return base.ExecuteFunction<GetPackageandSchemeWiseReport_Result>("GetPackageandSchemeWiseReport", clubIdParameter, packageIdParameter, schemeidParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<GetDongrdSchemeAnalysis_Result> GetDongrdSchemeAnalysis(Nullable<long> packageId, Nullable<long> schemeId, Nullable<long> cLUBID)
        {
    
            ObjectParameter packageIdParameter;
    
            if (packageId.HasValue)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(long));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId.HasValue)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetDongrdSchemeAnalysis_Result>("GetDongrdSchemeAnalysis", packageIdParameter, schemeIdParameter, cLUBIDParameter);
        }
        public ObjectResult<GetSchemeAnalysis_Result> GetSchemeAnalysis(Nullable<long> packageId, Nullable<long> schemeId, Nullable<long> cLUBID)
        {
    
            ObjectParameter packageIdParameter;
    
            if (packageId.HasValue)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(long));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId.HasValue)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetSchemeAnalysis_Result>("GetSchemeAnalysis", packageIdParameter, schemeIdParameter, cLUBIDParameter);
        }
        public ObjectResult<GetCancelSchemeAnalysis_Result> GetCancelSchemeAnalysis(Nullable<long> packageId, Nullable<long> schemeId, Nullable<long> cLUBID)
        {
    
            ObjectParameter packageIdParameter;
    
            if (packageId.HasValue)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(long));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId.HasValue)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetCancelSchemeAnalysis_Result>("GetCancelSchemeAnalysis", packageIdParameter, schemeIdParameter, cLUBIDParameter);
        }
        public ObjectResult<GetFreezeSchemeAnalysis_Result> GetFreezeSchemeAnalysis(Nullable<long> packageId, Nullable<long> schemeId, Nullable<long> cLUBID)
        {
    
            ObjectParameter packageIdParameter;
    
            if (packageId.HasValue)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(long));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId.HasValue)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(long));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetFreezeSchemeAnalysis_Result>("GetFreezeSchemeAnalysis", packageIdParameter, schemeIdParameter, cLUBIDParameter);
        }
        public ObjectResult<GetComplains_Result> GetComplains(string sEARCHTEXT, string sORTFIELD, string sORTDIR, Nullable<long> clubId, Nullable<long> userId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
            return base.ExecuteFunction<GetComplains_Result>("GetComplains", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, clubIdParameter, userIdParameter);
        }
        public ObjectResult<GetAbsentMembersByID_Result> GetAbsentMembersByID(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate, Nullable<long> memberId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
    
            ObjectParameter memberIdParameter;
    
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("MemberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("MemberId", typeof(long));
            }
            return base.ExecuteFunction<GetAbsentMembersByID_Result>("GetAbsentMembersByID", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter, memberIdParameter);
        }
        public ObjectResult<GetPresentMembersByID_Result> GetPresentMembersByID(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate, Nullable<long> memberId)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
    
            ObjectParameter memberIdParameter;
    
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("MemberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("MemberId", typeof(long));
            }
            return base.ExecuteFunction<GetPresentMembersByID_Result>("GetPresentMembersByID", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter, memberIdParameter);
        }
        public ObjectResult<GetAbsentEmployee_Result> GetAbsentEmployee(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
            return base.ExecuteFunction<GetAbsentEmployee_Result>("GetAbsentEmployee", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<GetPresentEmployee_Result> GetPresentEmployee(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
            return base.ExecuteFunction<GetPresentEmployee_Result>("GetPresentEmployee", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<GetStaffActivity_Result> GetStaffActivity(string sEARCHTEXT, string sORTFIELD, string sORTDIR, string fromDate, string toDate, Nullable<long> userId, Nullable<long> clubId, Nullable<long> leadStatus)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate != null)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(string));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter leadStatusParameter;
    
            if (leadStatus.HasValue)
            {
                leadStatusParameter = new ObjectParameter("LeadStatus", leadStatus);
            }
            else
            {
                leadStatusParameter = new ObjectParameter("LeadStatus", typeof(long));
            }
            return base.ExecuteFunction<GetStaffActivity_Result>("GetStaffActivity", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, fromDateParameter, toDateParameter, userIdParameter, clubIdParameter, leadStatusParameter);
        }
        public ObjectResult<GetLeadFollowupByDates_Result> GetLeadFollowupByDates(Nullable<long> clubID, string searchText, string fromDate, Nullable<long> userId)
        {
    
            ObjectParameter clubIDParameter;
    
            if (clubID.HasValue)
            {
                clubIDParameter = new ObjectParameter("ClubID", clubID);
            }
            else
            {
                clubIDParameter = new ObjectParameter("ClubID", typeof(long));
            }
    
            ObjectParameter searchTextParameter;
    
            if (searchText != null)
            {
                searchTextParameter = new ObjectParameter("SearchText", searchText);
            }
            else
            {
                searchTextParameter = new ObjectParameter("SearchText", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate != null)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(string));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
            return base.ExecuteFunction<GetLeadFollowupByDates_Result>("GetLeadFollowupByDates", clubIDParameter, searchTextParameter, fromDateParameter, userIdParameter);
        }
        public ObjectResult<UserTypeMaster> GetUserTypes(string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<UserTypeMaster>("GetUserTypes", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<PackageMaster> GetPackageMaster(Nullable<long> clubId, string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<PackageMaster>("GetPackageMaster", clubIdParameter, sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<GetUserSchemeMaster_Result> GetUserSchemeMaster(string sEARCHTEXT, string schemeName, string sORTFIELD, string sORTDIR, Nullable<long> cLUBID)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter schemeNameParameter;
    
            if (schemeName != null)
            {
                schemeNameParameter = new ObjectParameter("SchemeName", schemeName);
            }
            else
            {
                schemeNameParameter = new ObjectParameter("SchemeName", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetUserSchemeMaster_Result>("GetUserSchemeMaster", sEARCHTEXTParameter, schemeNameParameter, sORTFIELDParameter, sORTDIRParameter, cLUBIDParameter);
        }
        public ObjectResult<User> GetUsers(Nullable<long> cLUBID, Nullable<long> userId, Nullable<long> roleId, string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(long));
            }
    
            ObjectParameter roleIdParameter;
    
            if (roleId.HasValue)
            {
                roleIdParameter = new ObjectParameter("RoleId", roleId);
            }
            else
            {
                roleIdParameter = new ObjectParameter("RoleId", typeof(long));
            }
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<User>("GetUsers", cLUBIDParameter, userIdParameter, roleIdParameter, sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<Lead> GetLeads(Nullable<long> clubId, string fIRSTNAME, string lASTNAME, string mOBILENO, string dOB, Nullable<long> lEADSTATUS, string sORTFIELD, string sORTDIR, Nullable<long> uSERID)
        {
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter fIRSTNAMEParameter;
    
            if (fIRSTNAME != null)
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", fIRSTNAME);
            }
            else
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", typeof(string));
            }
    
            ObjectParameter lASTNAMEParameter;
    
            if (lASTNAME != null)
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", lASTNAME);
            }
            else
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", typeof(string));
            }
    
            ObjectParameter mOBILENOParameter;
    
            if (mOBILENO != null)
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", mOBILENO);
            }
            else
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", typeof(string));
            }
    
            ObjectParameter dOBParameter;
    
            if (dOB != null)
            {
                dOBParameter = new ObjectParameter("DOB", dOB);
            }
            else
            {
                dOBParameter = new ObjectParameter("DOB", typeof(string));
            }
    
            ObjectParameter lEADSTATUSParameter;
    
            if (lEADSTATUS.HasValue)
            {
                lEADSTATUSParameter = new ObjectParameter("LEADSTATUS", lEADSTATUS);
            }
            else
            {
                lEADSTATUSParameter = new ObjectParameter("LEADSTATUS", typeof(long));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter uSERIDParameter;
    
            if (uSERID.HasValue)
            {
                uSERIDParameter = new ObjectParameter("USERID", uSERID);
            }
            else
            {
                uSERIDParameter = new ObjectParameter("USERID", typeof(long));
            }
            return base.ExecuteFunction<Lead>("GetLeads", clubIdParameter, fIRSTNAMEParameter, lASTNAMEParameter, mOBILENOParameter, dOBParameter, lEADSTATUSParameter, sORTFIELDParameter, sORTDIRParameter, uSERIDParameter);
        }
        public ObjectResult<Lead> GetSalesLeads(Nullable<long> clubId, string fIRSTNAME, string lASTNAME, string mOBILENO, string agreementNo, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter clubIdParameter;
    
            if (clubId.HasValue)
            {
                clubIdParameter = new ObjectParameter("ClubId", clubId);
            }
            else
            {
                clubIdParameter = new ObjectParameter("ClubId", typeof(long));
            }
    
            ObjectParameter fIRSTNAMEParameter;
    
            if (fIRSTNAME != null)
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", fIRSTNAME);
            }
            else
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", typeof(string));
            }
    
            ObjectParameter lASTNAMEParameter;
    
            if (lASTNAME != null)
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", lASTNAME);
            }
            else
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", typeof(string));
            }
    
            ObjectParameter mOBILENOParameter;
    
            if (mOBILENO != null)
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", mOBILENO);
            }
            else
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", typeof(string));
            }
    
            ObjectParameter agreementNoParameter;
    
            if (agreementNo != null)
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", agreementNo);
            }
            else
            {
                agreementNoParameter = new ObjectParameter("AgreementNo", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<Lead>("GetSalesLeads", clubIdParameter, fIRSTNAMEParameter, lASTNAMEParameter, mOBILENOParameter, agreementNoParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<LeadTypeMaster> GetLeadTypes(string sEARCHTEXT, string sORTFIELD, string sORTDIR)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
            return base.ExecuteFunction<LeadTypeMaster>("GetLeadTypes", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter);
        }
        public ObjectResult<GetCustomers_Result> GetCustomers(string fIRSTNAME, string lASTNAME, string dOB, string mOBILENO, string rFIDNO, string mEMBERSHIPNO, string sORTFIELD, string sORTDIR, Nullable<long> cLUBID, string packageId, string schemeId)
        {
    
            ObjectParameter fIRSTNAMEParameter;
    
            if (fIRSTNAME != null)
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", fIRSTNAME);
            }
            else
            {
                fIRSTNAMEParameter = new ObjectParameter("FIRSTNAME", typeof(string));
            }
    
            ObjectParameter lASTNAMEParameter;
    
            if (lASTNAME != null)
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", lASTNAME);
            }
            else
            {
                lASTNAMEParameter = new ObjectParameter("LASTNAME", typeof(string));
            }
    
            ObjectParameter dOBParameter;
    
            if (dOB != null)
            {
                dOBParameter = new ObjectParameter("DOB", dOB);
            }
            else
            {
                dOBParameter = new ObjectParameter("DOB", typeof(string));
            }
    
            ObjectParameter mOBILENOParameter;
    
            if (mOBILENO != null)
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", mOBILENO);
            }
            else
            {
                mOBILENOParameter = new ObjectParameter("MOBILENO", typeof(string));
            }
    
            ObjectParameter rFIDNOParameter;
    
            if (rFIDNO != null)
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", rFIDNO);
            }
            else
            {
                rFIDNOParameter = new ObjectParameter("RFIDNO", typeof(string));
            }
    
            ObjectParameter mEMBERSHIPNOParameter;
    
            if (mEMBERSHIPNO != null)
            {
                mEMBERSHIPNOParameter = new ObjectParameter("MEMBERSHIPNO", mEMBERSHIPNO);
            }
            else
            {
                mEMBERSHIPNOParameter = new ObjectParameter("MEMBERSHIPNO", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
    
            ObjectParameter packageIdParameter;
    
            if (packageId != null)
            {
                packageIdParameter = new ObjectParameter("PackageId", packageId);
            }
            else
            {
                packageIdParameter = new ObjectParameter("PackageId", typeof(string));
            }
    
            ObjectParameter schemeIdParameter;
    
            if (schemeId != null)
            {
                schemeIdParameter = new ObjectParameter("SchemeId", schemeId);
            }
            else
            {
                schemeIdParameter = new ObjectParameter("SchemeId", typeof(string));
            }
            return base.ExecuteFunction<GetCustomers_Result>("GetCustomers", fIRSTNAMEParameter, lASTNAMEParameter, dOBParameter, mOBILENOParameter, rFIDNOParameter, mEMBERSHIPNOParameter, sORTFIELDParameter, sORTDIRParameter, cLUBIDParameter, packageIdParameter, schemeIdParameter);
        }
        public ObjectResult<GetAssignExercise_Result> GetAssignExercise(string sEARCHTEXT, string sORTFIELD, string sORTDIR, Nullable<long> cLUBID)
        {
    
            ObjectParameter sEARCHTEXTParameter;
    
            if (sEARCHTEXT != null)
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", sEARCHTEXT);
            }
            else
            {
                sEARCHTEXTParameter = new ObjectParameter("SEARCHTEXT", typeof(string));
            }
    
            ObjectParameter sORTFIELDParameter;
    
            if (sORTFIELD != null)
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", sORTFIELD);
            }
            else
            {
                sORTFIELDParameter = new ObjectParameter("SORTFIELD", typeof(string));
            }
    
            ObjectParameter sORTDIRParameter;
    
            if (sORTDIR != null)
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", sORTDIR);
            }
            else
            {
                sORTDIRParameter = new ObjectParameter("SORTDIR", typeof(string));
            }
    
            ObjectParameter cLUBIDParameter;
    
            if (cLUBID.HasValue)
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", cLUBID);
            }
            else
            {
                cLUBIDParameter = new ObjectParameter("CLUBID", typeof(long));
            }
            return base.ExecuteFunction<GetAssignExercise_Result>("GetAssignExercise", sEARCHTEXTParameter, sORTFIELDParameter, sORTDIRParameter, cLUBIDParameter);
        }

        #endregion

    }
}
