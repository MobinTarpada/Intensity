//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AccessMaster))]
    [KnownType(typeof(Club))]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadPresentation))]
    [KnownType(typeof(UserTarget))]
    [KnownType(typeof(UserTypeMaster))]
    [KnownType(typeof(Membership))]
    [KnownType(typeof(Lead))]
    public partial class User
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string firstName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string lastName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string email
        {
            get;
            set;
        }
        [DataMember]
        public virtual string profilePicture
        {
            get;
            set;
        }
        [DataMember]
        public virtual string username
        {
            get;
            set;
        }
        [DataMember]
        public virtual string password
        {
            get;
            set;
        }
        [DataMember]
        public virtual string mobileNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string address
        {
            get;
            set;
        }
        [DataMember]
        public virtual long clubId
        {
            get { return _clubId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clubId != value)
                    {
                        if (Club != null && Club.ID != value)
                        {
                            Club = null;
                        }
                        _clubId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _clubId;
        [DataMember]
        public virtual long userTypeId
        {
            get { return _userTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userTypeId != value)
                    {
                        if (UserTypeMaster != null && UserTypeMaster.ID != value)
                        {
                            UserTypeMaster = null;
                        }
                        _userTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _userTypeId;
        [DataMember]
        public virtual Nullable<long> memberId
        {
            get { return _memberId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberId != value)
                    {
                        if (Membership != null && Membership.ID != value)
                        {
                            Membership = null;
                        }
                        _memberId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _memberId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<AccessMaster> AccessMasters
        {
            get
            {
                if (_accessMasters == null)
                {
                    var newCollection = new FixupCollection<AccessMaster>();
                    newCollection.CollectionChanged += FixupAccessMasters;
                    _accessMasters = newCollection;
                }
                return _accessMasters;
            }
            set
            {
                if (!ReferenceEquals(_accessMasters, value))
                {
                    var previousValue = _accessMasters as FixupCollection<AccessMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessMasters;
                    }
                    _accessMasters = value;
                    var newValue = value as FixupCollection<AccessMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessMasters;
                    }
                }
            }
        }
        private ICollection<AccessMaster> _accessMasters;
        
    
        [DataMember]
        public virtual ICollection<AccessMaster> AccessMasters1
        {
            get
            {
                if (_accessMasters1 == null)
                {
                    var newCollection = new FixupCollection<AccessMaster>();
                    newCollection.CollectionChanged += FixupAccessMasters1;
                    _accessMasters1 = newCollection;
                }
                return _accessMasters1;
            }
            set
            {
                if (!ReferenceEquals(_accessMasters1, value))
                {
                    var previousValue = _accessMasters1 as FixupCollection<AccessMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessMasters1;
                    }
                    _accessMasters1 = value;
                    var newValue = value as FixupCollection<AccessMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessMasters1;
                    }
                }
            }
        }
        private ICollection<AccessMaster> _accessMasters1;
        
    
        [DataMember]
        public virtual Club Club
        {
            get { return _club; }
            set
            {
                if (!ReferenceEquals(_club, value))
                {
                    var previousValue = _club;
                    _club = value;
                    FixupClub(previousValue);
                }
            }
        }
        private Club _club;
        
    
        [DataMember]
        public virtual ICollection<LeadAppointment> LeadAppointments
        {
            get
            {
                if (_leadAppointments == null)
                {
                    var newCollection = new FixupCollection<LeadAppointment>();
                    newCollection.CollectionChanged += FixupLeadAppointments;
                    _leadAppointments = newCollection;
                }
                return _leadAppointments;
            }
            set
            {
                if (!ReferenceEquals(_leadAppointments, value))
                {
                    var previousValue = _leadAppointments as FixupCollection<LeadAppointment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadAppointments;
                    }
                    _leadAppointments = value;
                    var newValue = value as FixupCollection<LeadAppointment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadAppointments;
                    }
                }
            }
        }
        private ICollection<LeadAppointment> _leadAppointments;
        
    
        [DataMember]
        public virtual ICollection<LeadPresentation> LeadPresentations
        {
            get
            {
                if (_leadPresentations == null)
                {
                    var newCollection = new FixupCollection<LeadPresentation>();
                    newCollection.CollectionChanged += FixupLeadPresentations;
                    _leadPresentations = newCollection;
                }
                return _leadPresentations;
            }
            set
            {
                if (!ReferenceEquals(_leadPresentations, value))
                {
                    var previousValue = _leadPresentations as FixupCollection<LeadPresentation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeadPresentations;
                    }
                    _leadPresentations = value;
                    var newValue = value as FixupCollection<LeadPresentation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeadPresentations;
                    }
                }
            }
        }
        private ICollection<LeadPresentation> _leadPresentations;
        
    
        [DataMember]
        public virtual ICollection<UserTarget> UserTargets
        {
            get
            {
                if (_userTargets == null)
                {
                    var newCollection = new FixupCollection<UserTarget>();
                    newCollection.CollectionChanged += FixupUserTargets;
                    _userTargets = newCollection;
                }
                return _userTargets;
            }
            set
            {
                if (!ReferenceEquals(_userTargets, value))
                {
                    var previousValue = _userTargets as FixupCollection<UserTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTargets;
                    }
                    _userTargets = value;
                    var newValue = value as FixupCollection<UserTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTargets;
                    }
                }
            }
        }
        private ICollection<UserTarget> _userTargets;
        
    
        [DataMember]
        public virtual ICollection<UserTarget> UserTargets1
        {
            get
            {
                if (_userTargets1 == null)
                {
                    var newCollection = new FixupCollection<UserTarget>();
                    newCollection.CollectionChanged += FixupUserTargets1;
                    _userTargets1 = newCollection;
                }
                return _userTargets1;
            }
            set
            {
                if (!ReferenceEquals(_userTargets1, value))
                {
                    var previousValue = _userTargets1 as FixupCollection<UserTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTargets1;
                    }
                    _userTargets1 = value;
                    var newValue = value as FixupCollection<UserTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTargets1;
                    }
                }
            }
        }
        private ICollection<UserTarget> _userTargets1;
        
    
        [DataMember]
        public virtual ICollection<UserTarget> UserTargets2
        {
            get
            {
                if (_userTargets2 == null)
                {
                    var newCollection = new FixupCollection<UserTarget>();
                    newCollection.CollectionChanged += FixupUserTargets2;
                    _userTargets2 = newCollection;
                }
                return _userTargets2;
            }
            set
            {
                if (!ReferenceEquals(_userTargets2, value))
                {
                    var previousValue = _userTargets2 as FixupCollection<UserTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTargets2;
                    }
                    _userTargets2 = value;
                    var newValue = value as FixupCollection<UserTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTargets2;
                    }
                }
            }
        }
        private ICollection<UserTarget> _userTargets2;
        
    
        [DataMember]
        public virtual UserTypeMaster UserTypeMaster
        {
            get { return _userTypeMaster; }
            set
            {
                if (!ReferenceEquals(_userTypeMaster, value))
                {
                    var previousValue = _userTypeMaster;
                    _userTypeMaster = value;
                    FixupUserTypeMaster(previousValue);
                }
            }
        }
        private UserTypeMaster _userTypeMaster;
        
    
        [DataMember]
        public virtual ICollection<Membership> Memberships
        {
            get
            {
                if (_memberships == null)
                {
                    var newCollection = new FixupCollection<Membership>();
                    newCollection.CollectionChanged += FixupMemberships;
                    _memberships = newCollection;
                }
                return _memberships;
            }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships as FixupCollection<Membership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberships;
                    }
                    _memberships = value;
                    var newValue = value as FixupCollection<Membership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberships;
                    }
                }
            }
        }
        private ICollection<Membership> _memberships;
        
    
        [DataMember]
        public virtual Membership Membership
        {
            get { return _membership; }
            set
            {
                if (!ReferenceEquals(_membership, value))
                {
                    var previousValue = _membership;
                    _membership = value;
                    FixupMembership(previousValue);
                }
            }
        }
        private Membership _membership;
        
    
        [DataMember]
        public virtual ICollection<Lead> Leads
        {
            get
            {
                if (_leads == null)
                {
                    var newCollection = new FixupCollection<Lead>();
                    newCollection.CollectionChanged += FixupLeads;
                    _leads = newCollection;
                }
                return _leads;
            }
            set
            {
                if (!ReferenceEquals(_leads, value))
                {
                    var previousValue = _leads as FixupCollection<Lead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeads;
                    }
                    _leads = value;
                    var newValue = value as FixupCollection<Lead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeads;
                    }
                }
            }
        }
        private ICollection<Lead> _leads;
        
    
        [DataMember]
        public virtual ICollection<Lead> Leads1
        {
            get
            {
                if (_leads1 == null)
                {
                    var newCollection = new FixupCollection<Lead>();
                    newCollection.CollectionChanged += FixupLeads1;
                    _leads1 = newCollection;
                }
                return _leads1;
            }
            set
            {
                if (!ReferenceEquals(_leads1, value))
                {
                    var previousValue = _leads1 as FixupCollection<Lead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeads1;
                    }
                    _leads1 = value;
                    var newValue = value as FixupCollection<Lead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeads1;
                    }
                }
            }
        }
        private ICollection<Lead> _leads1;
        
    
        [DataMember]
        public virtual ICollection<Lead> Leads2
        {
            get
            {
                if (_leads2 == null)
                {
                    var newCollection = new FixupCollection<Lead>();
                    newCollection.CollectionChanged += FixupLeads2;
                    _leads2 = newCollection;
                }
                return _leads2;
            }
            set
            {
                if (!ReferenceEquals(_leads2, value))
                {
                    var previousValue = _leads2 as FixupCollection<Lead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLeads2;
                    }
                    _leads2 = value;
                    var newValue = value as FixupCollection<Lead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLeads2;
                    }
                }
            }
        }
        private ICollection<Lead> _leads2;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClub(Club previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Club != null)
            {
                if (!Club.Users.Contains(this))
                {
                    Club.Users.Add(this);
                }
                if (clubId != Club.ID)
                {
                    clubId = Club.ID;
                }
            }
        }
    
        private void FixupUserTypeMaster(UserTypeMaster previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (UserTypeMaster != null)
            {
                if (!UserTypeMaster.Users.Contains(this))
                {
                    UserTypeMaster.Users.Add(this);
                }
                if (userTypeId != UserTypeMaster.ID)
                {
                    userTypeId = UserTypeMaster.ID;
                }
            }
        }
    
        private void FixupMembership(Membership previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Membership != null)
            {
                if (!Membership.Users.Contains(this))
                {
                    Membership.Users.Add(this);
                }
                if (memberId != Membership.ID)
                {
                    memberId = Membership.ID;
                }
            }
            else if (!_settingFK)
            {
                memberId = null;
            }
        }
    
        private void FixupAccessMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessMaster item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAccessMasters1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessMaster item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }
    
        private void FixupLeadAppointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadAppointment item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadAppointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeadPresentations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LeadPresentation item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LeadPresentation item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTarget item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserTargets1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTarget item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }
    
        private void FixupUserTargets2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTarget item in e.NewItems)
                {
                    item.User2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User2, this))
                    {
                        item.User2 = null;
                    }
                }
            }
        }
    
        private void FixupMemberships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Membership item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lead item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lead item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupLeads1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lead item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lead item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }
    
        private void FixupLeads2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lead item in e.NewItems)
                {
                    item.User2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lead item in e.OldItems)
                {
                    if (ReferenceEquals(item.User2, this))
                    {
                        item.User2 = null;
                    }
                }
            }
        }

        #endregion

    }
}
