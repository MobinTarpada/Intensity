//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(User))]
    [KnownType(typeof(UserSchemeTransaction))]
    public partial class UserTypeMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string type
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<bool> isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
        
    
        [DataMember]
        public virtual ICollection<UserSchemeTransaction> UserSchemeTransactions
        {
            get
            {
                if (_userSchemeTransactions == null)
                {
                    var newCollection = new FixupCollection<UserSchemeTransaction>();
                    newCollection.CollectionChanged += FixupUserSchemeTransactions;
                    _userSchemeTransactions = newCollection;
                }
                return _userSchemeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_userSchemeTransactions, value))
                {
                    var previousValue = _userSchemeTransactions as FixupCollection<UserSchemeTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserSchemeTransactions;
                    }
                    _userSchemeTransactions = value;
                    var newValue = value as FixupCollection<UserSchemeTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserSchemeTransactions;
                    }
                }
            }
        }
        private ICollection<UserSchemeTransaction> _userSchemeTransactions;

        #endregion

        #region Association Fixup
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.UserTypeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserTypeMaster, this))
                    {
                        item.UserTypeMaster = null;
                    }
                }
            }
        }
    
        private void FixupUserSchemeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserSchemeTransaction item in e.NewItems)
                {
                    item.UserTypeMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserSchemeTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserTypeMaster, this))
                    {
                        item.UserTypeMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
