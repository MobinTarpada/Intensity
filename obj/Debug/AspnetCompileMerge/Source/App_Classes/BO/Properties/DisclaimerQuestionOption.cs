//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DisclaimerQuestionsMaster))]
    [KnownType(typeof(DisclaimerQuestionAnswer))]
    public partial class DisclaimerQuestionOption
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string options
        {
            get;
            set;
        }
        [DataMember]
        public virtual long questionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    if (DisclaimerQuestionsMaster != null && DisclaimerQuestionsMaster.ID != value)
                    {
                        DisclaimerQuestionsMaster = null;
                    }
                    _questionId = value;
                }
            }
        }
        private long _questionId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual DisclaimerQuestionsMaster DisclaimerQuestionsMaster
        {
            get { return _disclaimerQuestionsMaster; }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionsMaster, value))
                {
                    var previousValue = _disclaimerQuestionsMaster;
                    _disclaimerQuestionsMaster = value;
                    FixupDisclaimerQuestionsMaster(previousValue);
                }
            }
        }
        private DisclaimerQuestionsMaster _disclaimerQuestionsMaster;
        
    
        [DataMember]
        public virtual ICollection<DisclaimerQuestionsMaster> DisclaimerQuestionsMasters
        {
            get
            {
                if (_disclaimerQuestionsMasters == null)
                {
                    var newCollection = new FixupCollection<DisclaimerQuestionsMaster>();
                    newCollection.CollectionChanged += FixupDisclaimerQuestionsMasters;
                    _disclaimerQuestionsMasters = newCollection;
                }
                return _disclaimerQuestionsMasters;
            }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionsMasters, value))
                {
                    var previousValue = _disclaimerQuestionsMasters as FixupCollection<DisclaimerQuestionsMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimerQuestionsMasters;
                    }
                    _disclaimerQuestionsMasters = value;
                    var newValue = value as FixupCollection<DisclaimerQuestionsMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimerQuestionsMasters;
                    }
                }
            }
        }
        private ICollection<DisclaimerQuestionsMaster> _disclaimerQuestionsMasters;
        
    
        [DataMember]
        public virtual ICollection<DisclaimerQuestionAnswer> DisclaimerQuestionAnswers
        {
            get
            {
                if (_disclaimerQuestionAnswers == null)
                {
                    var newCollection = new FixupCollection<DisclaimerQuestionAnswer>();
                    newCollection.CollectionChanged += FixupDisclaimerQuestionAnswers;
                    _disclaimerQuestionAnswers = newCollection;
                }
                return _disclaimerQuestionAnswers;
            }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionAnswers, value))
                {
                    var previousValue = _disclaimerQuestionAnswers as FixupCollection<DisclaimerQuestionAnswer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimerQuestionAnswers;
                    }
                    _disclaimerQuestionAnswers = value;
                    var newValue = value as FixupCollection<DisclaimerQuestionAnswer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimerQuestionAnswers;
                    }
                }
            }
        }
        private ICollection<DisclaimerQuestionAnswer> _disclaimerQuestionAnswers;

        #endregion

        #region Association Fixup
    
        private void FixupDisclaimerQuestionsMaster(DisclaimerQuestionsMaster previousValue)
        {
            if (previousValue != null && previousValue.DisclaimerQuestionOptions.Contains(this))
            {
                previousValue.DisclaimerQuestionOptions.Remove(this);
            }
    
            if (DisclaimerQuestionsMaster != null)
            {
                if (!DisclaimerQuestionsMaster.DisclaimerQuestionOptions.Contains(this))
                {
                    DisclaimerQuestionsMaster.DisclaimerQuestionOptions.Add(this);
                }
                if (questionId != DisclaimerQuestionsMaster.ID)
                {
                    questionId = DisclaimerQuestionsMaster.ID;
                }
            }
        }
    
        private void FixupDisclaimerQuestionsMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DisclaimerQuestionsMaster item in e.NewItems)
                {
                    item.DisclaimerQuestionOption = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DisclaimerQuestionsMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.DisclaimerQuestionOption, this))
                    {
                        item.DisclaimerQuestionOption = null;
                    }
                }
            }
        }
    
        private void FixupDisclaimerQuestionAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DisclaimerQuestionAnswer item in e.NewItems)
                {
                    item.DisclaimerQuestionOption = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DisclaimerQuestionAnswer item in e.OldItems)
                {
                    if (ReferenceEquals(item.DisclaimerQuestionOption, this))
                    {
                        item.DisclaimerQuestionOption = null;
                    }
                }
            }
        }

        #endregion

    }
}
