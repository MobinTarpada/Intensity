//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DisclaimerQuestionOption))]
    [KnownType(typeof(DisclaimerQuestionsMaster))]
    [KnownType(typeof(DisclaimerQuestionAnswer))]
    public partial class DisclaimerQuestionsMaster
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string questions
        {
            get;
            set;
        }
        [DataMember]
        public virtual int questionTypeId
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Comment
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<long> QuestionId
        {
            get { return _questionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_questionId != value)
                    {
                        if (DisclaimerQuestionsMaster2 != null && DisclaimerQuestionsMaster2.ID != value)
                        {
                            DisclaimerQuestionsMaster2 = null;
                        }
                        _questionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _questionId;
        [DataMember]
        public virtual Nullable<long> OptionId
        {
            get { return _optionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_optionId != value)
                    {
                        if (DisclaimerQuestionOption != null && DisclaimerQuestionOption.ID != value)
                        {
                            DisclaimerQuestionOption = null;
                        }
                        _optionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _optionId;
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<DisclaimerQuestionOption> DisclaimerQuestionOptions
        {
            get
            {
                if (_disclaimerQuestionOptions == null)
                {
                    var newCollection = new FixupCollection<DisclaimerQuestionOption>();
                    newCollection.CollectionChanged += FixupDisclaimerQuestionOptions;
                    _disclaimerQuestionOptions = newCollection;
                }
                return _disclaimerQuestionOptions;
            }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionOptions, value))
                {
                    var previousValue = _disclaimerQuestionOptions as FixupCollection<DisclaimerQuestionOption>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimerQuestionOptions;
                    }
                    _disclaimerQuestionOptions = value;
                    var newValue = value as FixupCollection<DisclaimerQuestionOption>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimerQuestionOptions;
                    }
                }
            }
        }
        private ICollection<DisclaimerQuestionOption> _disclaimerQuestionOptions;
        
    
        [DataMember]
        public virtual DisclaimerQuestionOption DisclaimerQuestionOption
        {
            get { return _disclaimerQuestionOption; }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionOption, value))
                {
                    var previousValue = _disclaimerQuestionOption;
                    _disclaimerQuestionOption = value;
                    FixupDisclaimerQuestionOption(previousValue);
                }
            }
        }
        private DisclaimerQuestionOption _disclaimerQuestionOption;
        
    
        [DataMember]
        public virtual ICollection<DisclaimerQuestionsMaster> DisclaimerQuestionsMaster1
        {
            get
            {
                if (_disclaimerQuestionsMaster1 == null)
                {
                    var newCollection = new FixupCollection<DisclaimerQuestionsMaster>();
                    newCollection.CollectionChanged += FixupDisclaimerQuestionsMaster1;
                    _disclaimerQuestionsMaster1 = newCollection;
                }
                return _disclaimerQuestionsMaster1;
            }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionsMaster1, value))
                {
                    var previousValue = _disclaimerQuestionsMaster1 as FixupCollection<DisclaimerQuestionsMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimerQuestionsMaster1;
                    }
                    _disclaimerQuestionsMaster1 = value;
                    var newValue = value as FixupCollection<DisclaimerQuestionsMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimerQuestionsMaster1;
                    }
                }
            }
        }
        private ICollection<DisclaimerQuestionsMaster> _disclaimerQuestionsMaster1;
        
    
        [DataMember]
        public virtual DisclaimerQuestionsMaster DisclaimerQuestionsMaster2
        {
            get { return _disclaimerQuestionsMaster2; }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionsMaster2, value))
                {
                    var previousValue = _disclaimerQuestionsMaster2;
                    _disclaimerQuestionsMaster2 = value;
                    FixupDisclaimerQuestionsMaster2(previousValue);
                }
            }
        }
        private DisclaimerQuestionsMaster _disclaimerQuestionsMaster2;
        
    
        [DataMember]
        public virtual ICollection<DisclaimerQuestionAnswer> DisclaimerQuestionAnswers
        {
            get
            {
                if (_disclaimerQuestionAnswers == null)
                {
                    var newCollection = new FixupCollection<DisclaimerQuestionAnswer>();
                    newCollection.CollectionChanged += FixupDisclaimerQuestionAnswers;
                    _disclaimerQuestionAnswers = newCollection;
                }
                return _disclaimerQuestionAnswers;
            }
            set
            {
                if (!ReferenceEquals(_disclaimerQuestionAnswers, value))
                {
                    var previousValue = _disclaimerQuestionAnswers as FixupCollection<DisclaimerQuestionAnswer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDisclaimerQuestionAnswers;
                    }
                    _disclaimerQuestionAnswers = value;
                    var newValue = value as FixupCollection<DisclaimerQuestionAnswer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDisclaimerQuestionAnswers;
                    }
                }
            }
        }
        private ICollection<DisclaimerQuestionAnswer> _disclaimerQuestionAnswers;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDisclaimerQuestionOption(DisclaimerQuestionOption previousValue)
        {
            if (previousValue != null && previousValue.DisclaimerQuestionsMasters.Contains(this))
            {
                previousValue.DisclaimerQuestionsMasters.Remove(this);
            }
    
            if (DisclaimerQuestionOption != null)
            {
                if (!DisclaimerQuestionOption.DisclaimerQuestionsMasters.Contains(this))
                {
                    DisclaimerQuestionOption.DisclaimerQuestionsMasters.Add(this);
                }
                if (OptionId != DisclaimerQuestionOption.ID)
                {
                    OptionId = DisclaimerQuestionOption.ID;
                }
            }
            else if (!_settingFK)
            {
                OptionId = null;
            }
        }
    
        private void FixupDisclaimerQuestionsMaster2(DisclaimerQuestionsMaster previousValue)
        {
            if (previousValue != null && previousValue.DisclaimerQuestionsMaster1.Contains(this))
            {
                previousValue.DisclaimerQuestionsMaster1.Remove(this);
            }
    
            if (DisclaimerQuestionsMaster2 != null)
            {
                if (!DisclaimerQuestionsMaster2.DisclaimerQuestionsMaster1.Contains(this))
                {
                    DisclaimerQuestionsMaster2.DisclaimerQuestionsMaster1.Add(this);
                }
                if (QuestionId != DisclaimerQuestionsMaster2.ID)
                {
                    QuestionId = DisclaimerQuestionsMaster2.ID;
                }
            }
            else if (!_settingFK)
            {
                QuestionId = null;
            }
        }
    
        private void FixupDisclaimerQuestionOptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DisclaimerQuestionOption item in e.NewItems)
                {
                    item.DisclaimerQuestionsMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DisclaimerQuestionOption item in e.OldItems)
                {
                    if (ReferenceEquals(item.DisclaimerQuestionsMaster, this))
                    {
                        item.DisclaimerQuestionsMaster = null;
                    }
                }
            }
        }
    
        private void FixupDisclaimerQuestionsMaster1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DisclaimerQuestionsMaster item in e.NewItems)
                {
                    item.DisclaimerQuestionsMaster2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DisclaimerQuestionsMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.DisclaimerQuestionsMaster2, this))
                    {
                        item.DisclaimerQuestionsMaster2 = null;
                    }
                }
            }
        }
    
        private void FixupDisclaimerQuestionAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DisclaimerQuestionAnswer item in e.NewItems)
                {
                    item.DisclaimerQuestionsMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DisclaimerQuestionAnswer item in e.OldItems)
                {
                    if (ReferenceEquals(item.DisclaimerQuestionsMaster, this))
                    {
                        item.DisclaimerQuestionsMaster = null;
                    }
                }
            }
        }

        #endregion

    }
}
