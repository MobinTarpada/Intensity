//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace FitnessCenter.BO
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LeadAppointment))]
    [KnownType(typeof(LeadPresentation))]
    [KnownType(typeof(Lead))]
    public partial class LeadFollowup
    {
        #region Primitive Properties
        [DataMember]
        public virtual long ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime followupDateTime
        {
            get;
            set;
        }
        [DataMember]
        public virtual long leadId
        {
            get { return _leadId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leadId != value)
                    {
                        if (Lead != null && Lead.ID != value)
                        {
                            Lead = null;
                        }
                        _leadId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private long _leadId;
        [DataMember]
        public virtual Nullable<long> appoinmentId
        {
            get { return _appoinmentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_appoinmentId != value)
                    {
                        if (LeadAppointment != null && LeadAppointment.ID != value)
                        {
                            LeadAppointment = null;
                        }
                        _appoinmentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _appoinmentId;
        [DataMember]
        public virtual Nullable<long> presentationId
        {
            get { return _presentationId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_presentationId != value)
                    {
                        if (LeadPresentation != null && LeadPresentation.ID != value)
                        {
                            LeadPresentation = null;
                        }
                        _presentationId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _presentationId;
        [DataMember]
        public virtual string Remarks
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime insertDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> updateDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> deleteDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isActive
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool isDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual LeadAppointment LeadAppointment
        {
            get { return _leadAppointment; }
            set
            {
                if (!ReferenceEquals(_leadAppointment, value))
                {
                    var previousValue = _leadAppointment;
                    _leadAppointment = value;
                    FixupLeadAppointment(previousValue);
                }
            }
        }
        private LeadAppointment _leadAppointment;
        
    
        [DataMember]
        public virtual LeadPresentation LeadPresentation
        {
            get { return _leadPresentation; }
            set
            {
                if (!ReferenceEquals(_leadPresentation, value))
                {
                    var previousValue = _leadPresentation;
                    _leadPresentation = value;
                    FixupLeadPresentation(previousValue);
                }
            }
        }
        private LeadPresentation _leadPresentation;
        
    
        [DataMember]
        public virtual Lead Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private Lead _lead;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLeadAppointment(LeadAppointment previousValue)
        {
            if (previousValue != null && previousValue.LeadFollowups.Contains(this))
            {
                previousValue.LeadFollowups.Remove(this);
            }
    
            if (LeadAppointment != null)
            {
                if (!LeadAppointment.LeadFollowups.Contains(this))
                {
                    LeadAppointment.LeadFollowups.Add(this);
                }
                if (appoinmentId != LeadAppointment.ID)
                {
                    appoinmentId = LeadAppointment.ID;
                }
            }
            else if (!_settingFK)
            {
                appoinmentId = null;
            }
        }
    
        private void FixupLeadPresentation(LeadPresentation previousValue)
        {
            if (previousValue != null && previousValue.LeadFollowups.Contains(this))
            {
                previousValue.LeadFollowups.Remove(this);
            }
    
            if (LeadPresentation != null)
            {
                if (!LeadPresentation.LeadFollowups.Contains(this))
                {
                    LeadPresentation.LeadFollowups.Add(this);
                }
                if (presentationId != LeadPresentation.ID)
                {
                    presentationId = LeadPresentation.ID;
                }
            }
            else if (!_settingFK)
            {
                presentationId = null;
            }
        }
    
        private void FixupLead(Lead previousValue)
        {
            if (previousValue != null && previousValue.LeadFollowups.Contains(this))
            {
                previousValue.LeadFollowups.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.LeadFollowups.Contains(this))
                {
                    Lead.LeadFollowups.Add(this);
                }
                if (leadId != Lead.ID)
                {
                    leadId = Lead.ID;
                }
            }
        }

        #endregion

    }
}
